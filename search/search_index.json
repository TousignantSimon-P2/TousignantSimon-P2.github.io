{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Programmation 2 (420-2A6-VI) - Hiver 2025","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Vous trouverez ici les notes et exercices du cours. J'ajouterai du nouveau contenu continuellement.</p> <p>Pr\u00e9alable \u00e0 ce cours : 420-1D6-VI Programmation 1</p> <p>Ce cours est pr\u00e9alable \u00e0 : 420-4A6-VI : Programmation 3 420-3B3-VI : Jeux 2d 420-5A4-VI : Jeux 3d  420-4D4-VI : Applications mobiles 1 420-5B4-VI : Applications mobiles 2 420-3A3-VI : Nano-ordinateurs  </p> <p>Cheminement complet: https://informatique.apical.xyz/</p>"},{"location":"#environnement-de-travail","title":"Environnement de travail","text":"<p>Pour le cours vous avez deux logiciels \u00e0 installer:</p> <ul> <li>Visual studio community 2022</li> <li>Un \u00e9diteur de texte \u00e9volu\u00e9 tel notepad++ (recommand\u00e9) </li> <li>Git</li> </ul>"},{"location":"#visual-studio-community-2022","title":"Visual studio community 2022","text":"<p>Vous devez installer visual studio community uniquement avec les paquets essentiels au d\u00e9veloppement des applications de bureau. Les paquets tels que, mais non limit\u00e9s \u00e0, intellicode, intellisense, liveshare sont formellement proscrits. \u2003</p>"},{"location":"#notepad-ou-autre-editeur-compatible","title":"Notepad++ (ou autre \u00e9diteur compatible)","text":"<p>Parfois git vous demande de faire l'\u00e9ditions de fichiers tel que les commentaires pour les soumissions. (git commit). Il arrive \u00e9galement que des conflits soient pr\u00e9sent. Le logiciels permet de mieux travailler dans ces situations plus complexe.</p>"},{"location":"#git","title":"Git","text":"<p>Installation normale, portez attention \u00e0 l'\u00e9diteur par d\u00e9faut. Autrement, vous allez vous retrouver avec vim pour \u00e9diter vos fichiers</p>"},{"location":"#regles-de-classes-et-explications","title":"R\u00e8gles de classes et explications :","text":"<p>Petit rappel des r\u00e8gles au niveau de la P.D.E.A</p>"},{"location":"#conditions-pedagogiques-particulieres","title":"Conditions p\u00e9dagogiques particuli\u00e8res","text":"<p>Utilisation de g\u00e9n\u00e9rateur automatique :  </p> <p>Dans le cadre des activit\u00e9s acad\u00e9miques du cours, l'utilisation de g\u00e9n\u00e9rateurs de code automatiques, d'assistants d'IA tels que ChatGPT, Copilot ou tout autre outil similaire permettant la cr\u00e9ation automatique de contenu, la g\u00e9n\u00e9ration de code ou l\u2019assistance \u00e0 la r\u00e9solution d'exercices, est formellement interdite. Toute utilisation de ces outils durant un cours entra\u00eenera l'exclusion imm\u00e9diate de l'\u00e9l\u00e8ve de la p\u00e9riode concern\u00e9e.  </p>"},{"location":"#utilisation-des-cellulaires-ou-dappareils-mobiles-en-classe","title":"Utilisation des cellulaires ou d'appareils mobiles en classe","text":"<p>Toute utilisation d'appareil mobile tel que cellulaire, tablette ou console de jeux mobile est proscrite pendant le bloc horaire \u00e0 l'int\u00e9rieur du local. (Pr\u00e9cision : pauses incluses.) L'utilisation de tels appareils doit imp\u00e9rativement se faire hors du local afin de favoriser le climat d'apprentissage.  </p> <p>Les manquements aux articles pr\u00e9c\u00e9dents seront consign\u00e9s. Apr\u00e8s trois (3) exclusions, des d\u00e9marches administratives seront entreprises avec l'API afin de d\u00e9terminer les modalit\u00e9s de cheminement. Installation de Visual Studio Community 2022:</p> <p>Les seuls paquets autoris\u00e9s sont :</p> <ul> <li>Outils de d\u00e9veloppement d'application de bureau .NET</li> <li>Outils de d\u00e9veloppement .NET Framework 4.7.2</li> <li>C# et Visual Basic</li> </ul>"},{"location":"#environnement-numerique-dapprentissage-plateforme","title":"Environnement num\u00e9rique d\u2019apprentissage (plateforme)","text":"<ul> <li>Team</li> <li>Github</li> <li>Github classroom</li> </ul> <p>L'\u00e9l\u00e8ve a la responsabilit\u00e9 d'avoir un compte github avec un nom d'utilisateur r\u00e9pondant \u00e0 la norme suivante :</p> <p>cgpvicto-[son num\u00e9ro de DA]</p> <p>exemple : cgpvicto-9999999</p> <p>Une fois le compte github cr\u00e9\u00e9. On doit rejoindre le github classroom correspondant \u00e0 son groupe : gr. 00001 (mardi 13:15, vendredi 09:15) gr. 00002 (mardi 09:15, vendredi 13:15)</p>"},{"location":"convention/","title":"Convention de nommage C","text":""},{"location":"convention/#gardez-en-tete","title":"Gardez en t\u00eate","text":"<ul> <li>C# est sensible \u00e0 la casse</li> </ul>"},{"location":"convention/#regles-generales","title":"R\u00e8gles g\u00e9n\u00e9rales","text":"<ul> <li>Pensez approche K.I.S.S.</li> <li>Toujours : Les summarys</li> <li>Toujours commencer une m\u00e9thode par une lettre majuscule camelcase</li> <li>Toujours commencer une variable membre par _</li> <li>Toujours garder en t\u00eate de mettre priv\u00e9 par d\u00e9faut et public seulement si n\u00e9cessaire</li> <li>Toujours en fran\u00e7ais lorsque possible.</li> </ul>"},{"location":"convention/#definition-des-classes","title":"D\u00e9finition des classes","text":"<ul> <li>Commence par un summary</li> <li>Comence par une majuscule</li> <li>Doit avoir une visibilit\u00e9 d\u00e9finie</li> <li>Aucun _ dans le nom</li> <li> <p>Doit \u00eatre en francais</p> <p> ** L'ordre des choses est la suivante **</p> <ul> <li>D\u00e9claration de la classe  </li> <li>D\u00e9claration des variable membres  </li> <li>D\u00e9claration des constructeurs  </li> <li>D\u00e9claration des m\u00e9thodes  </li> <li>D\u00e9claration des impl\u00e9mentations d'interface  </li> <li>D\u00e9claration de la m\u00e9thode ToString()  </li> </ul> </li> </ul>"},{"location":"convention/#definition-des-methodes","title":"D\u00e9finition des m\u00e9thodes.","text":"<ul> <li>Commence par un summary</li> <li>Comence par une majuscule</li> <li>Doit avoir une visibilit\u00e9 d\u00e9finie</li> <li>Aucun _ dans le nom</li> </ul>"},{"location":"convention/#noms-des-variables","title":"Noms des variables","text":"<ul> <li>Variable membre<ul> <li>Commence par un _ si c'Est une variable membre</li> <li>Casse chameau</li> <li>Commentaire si la variable n\u00e9cessite une pr\u00e9cision sur ces limites de valeurs, r\u00f4le, etc.</li> </ul> </li> <li>Variable standard<ul> <li>Casse chameau</li> <li>Pas de _ dans le nom de la variable</li> </ul> </li> </ul>"},{"location":"convention/#commentaires","title":"Commentaires","text":"<ul> <li>N\u00e9cessaire pour les ent\u00eate de classe et de m\u00e9thode sous la forme de summary</li> </ul>"},{"location":"horaire/","title":"Horaire du cours de programmation 2","text":"Semaine Cours Date Sections Mati\u00e8re Bloc Travail \u00e0 faire Remises 1 1 2025-01-17 2 2025-01-21 2 3 2025-01-24 4 2025-01-28 3 5 2025-01-31 6 2025-02-04 4 7 2025-02-07 Formatif formel 8 2025-02-11 Retour formatif 5 9 2025-02-14 10 2025-02-18 6 11 2025-02-21 Examen 1 12 2025-02-25 7 13 2025-02-28 14 2025-03-11 8 15 2025-03-14 16 2025-03-18 9 17 2025-03-21 18 2025-03-28 10 19 2025-04-01 20 2025-04-04 Examen 2 11 21 2025-04-08 22 2025-04-11 12 23 2025-04-15 24 2025-04-22 13 25 2025-04-24 26 2025-04-29 14 27 2025-05-06 28 2025-05-09 15 29 2025-05-13 30 2025-05-16 Examen final"},{"location":"ressources/","title":"Ressources","text":""},{"location":"ressources/#documentation-officielle","title":"Documentation officielle","text":"<p>C# documentation officielle : https://learn.microsoft.com/fr-ca/dotnet/csharp/tour-of-csharp/</p> <p>.Net 8.0 : https://learn.microsoft.com/fr-ca/dotnet/api/?view=net-8.0</p> <p>.Net 9.0 : https://learn.microsoft.com/fr-ca/dotnet/api/?view=net-9.0</p> <p>Tests unitaires MSTest : https://learn.microsoft.com/fr-ca/dotnet/core/testing/unit-testing-with-mstest </p> <p>Table ASCII : https://www.asciitable.com/</p>"},{"location":"exercices/exercices_semaine_2/","title":"Exercice 2","text":"<ul> <li>Faire un d\u00e9p\u00f4t Git dans un dossier de votre choix. (git init)</li> <li>Ajouter le .gitignore pour Visual Studio (sur Google VisualStudio.gitignore -&gt; renommez-le)</li> <li>Cr\u00e9er une solution Visual Studio avec 2 projets \u00e0 l'int\u00e9rieur (Nommons-la Exercice2)<ul> <li>Un projet console .NET 8</li> <li>Une biblioth\u00e8que de classes MesOutils-9999999 (avec votre DA)</li> </ul> </li> </ul>"},{"location":"exercices/exercices_semaine_2/#decoupage-du-probleme","title":"D\u00e9coupage du probl\u00e8me","text":"<ul> <li>Dans une branche devParceQueSimonLeDemande, faites la codification des \u00e9l\u00e9ments suivants :<ul> <li>Une classe statique \"OutilTableaux\" avec les m\u00e9thodes statiques suivantes :</li> <li>G\u00e9n\u00e9rer un tableau avec une taille donn\u00e9e.</li> <li>G\u00e9n\u00e9rer un tableau avec une taille donn\u00e9e, un minimum pour les valeurs inclus, un maximum inclusif.</li> <li>Inverser un tableau nomm\u00e9 Inverser.</li> <li>D\u00e9caler vers la droite un tableau sans rotation d'un nombre d'\u00e9l\u00e9ments.</li> <li>D\u00e9caler vers la gauche un tableau sans rotation d'un nombre d'\u00e9l\u00e9ments.</li> <li>D\u00e9caler vers la droite un tableau avec rotation d'un nombre d'\u00e9l\u00e9ments.</li> <li>D\u00e9caler vers la gauche un tableau avec rotation d'un nombre d'\u00e9l\u00e9ments.</li> <li>Copier un tableau \u00e0 l'identique.</li> <li>Extraire un sous-tableau d'un tableau \u00e0 partir d'un index x \u00e0 un index y et le recopier dans un tableau de destination \u00e0 partir d'un index z.</li> <li>Trier avec bulle, insertion et s\u00e9lection doit \u00eatre d\u00e9plac\u00e9 dans cette biblioth\u00e8que.</li> <li>Faite la d\u00e9claration seulement de TriRadix avec les arguments et lever l'exception n\u00e9cessaire.</li> <li>Faites la d\u00e9claration de la classe File avec comme m\u00e9thode \"Enfiler, Defiler et Observer\". Lever les exceptions n\u00e9cessaires.</li> </ul> </li> </ul>"},{"location":"exercices/exercices_semaine_2/#_1","title":"Exercice 2","text":"<ul> <li> Les v\u00e9rifications sanitaires doivent \u00eatre faites pour chaque m\u00e9thode.</li> <li> Les r\u00e9sum\u00e9s doivent \u00eatre pr\u00e9sents pour chaque m\u00e9thode.</li> <li> On ne laisse pas tra\u00eener d'espace blanc pour rien.</li> <li> Si on a du code qui se duplique, on le factorise dans une m\u00e9thode \u00e0 part.</li> <li> Le code dupliqu\u00e9 doit \u00eatre factoris\u00e9.</li> </ul>"},{"location":"exercices/exercices_tri_radix.md/","title":"Exercice 3 - Tri radix","text":"<ul> <li>Une fois l'exercice 2 compl\u00e9t\u00e9 : </li> </ul>"},{"location":"exercices/exercices_tri_radix.md/#reorganisation-des-fichiers","title":"R\u00e9organisation des fichiers","text":"<ul> <li>Placez-vous dans la branche \"main\" et fusionnez \"merge\" la branche de developpement</li> <li>\u00c0 partir de cette branche main -&gt; faites une branche \"Tri\"<ul> <li>R\u00e9organisez vos fichiers de fa\u00e7on \u00e0 ce que :  </li> <li>Dans une classe Tris il y ait -&gt; bubble, insertion, selection et radix  </li> <li>radix va lancer l'exception de non impl\u00e9mentation pour le moment.  </li> <li>La classe Tris va \u00eatre dans les namespace Outils_9999999.Tris  </li> <li>Faites la classe OutilsTableaux et d\u00e9placez y les m\u00e9thodes n\u00e9cessaires.</li> <li>Les m\u00e9thodes qui ne sont pas utiles \u00e0 l'ext\u00e9rieure de la classe doivent \u00eatre \"private\" </li> </ul> </li> </ul>"},{"location":"exercices/exercices_tri_radix.md/#programmation","title":"Programmation","text":"<ul> <li>Avec des m\u00e9thode de niveau priv\u00e9 de cette classe Tri:<ul> <li>Craquez le probl\u00e8me ExtraireNombre(nombre, position) avec (nombre/10^pos)%10 :</li> <li>Cr\u00e9er un dossier dans votre projet nomm\u00e9 \"StructureDeDonnee\"</li> <li>Faites la classe File  </li> <li>La classe File doit contenir :<ul> <li>Un tableau de int  </li> <li>Une variable membre index repr\u00e9sentant le d\u00e9but de file  </li> <li>Une variable membre index repr\u00e9sentant la fin de file</li> <li>Un constructeur qui re\u00e7oit en param\u00e8tre une longueur.</li> <li>Une m\u00e9thode void Enfiler(int)</li> <li>Une m\u00e9thode int Defiler()</li> <li>Une m\u00e9thode int Observer()</li> <li>Un accesseur Vide</li> <li>Un accesseur Plein</li> </ul> </li> </ul> </li> </ul>"},{"location":"exercices/exercices_tri_radix.md/#_1","title":"Exercice 3 - Tri radix","text":"<ul> <li> Les v\u00e9rifications sanitaires doivent \u00eatre faites pour chaque m\u00e9thode.</li> <li> Les r\u00e9sum\u00e9s doivent \u00eatre pr\u00e9sents pour chaque m\u00e9thode.</li> <li> On ne laisse pas tra\u00eener d'espace blanc pour rien.</li> <li> Si on a du code qui se duplique, on le factorise dans une m\u00e9thode \u00e0 part.</li> <li> Le code dupliqu\u00e9 doit \u00eatre factoris\u00e9.</li> <li> Un \"commit\" par version qui compile.</li> </ul>"},{"location":"notes_de_cours/Section_0.0/","title":"Outils de developpement \u00e0 avoir","text":""},{"location":"notes_de_cours/Section_0.0/#git","title":"git","text":"<ul> <li>Installer la derni\u00e8re version de git pour windows</li> </ul>"},{"location":"notes_de_cours/Section_0.0/#editeur-de-texte","title":"\u00e9diteur de texte","text":"<ul> <li>Notepad++ recommand\u00e9.  </li> <li>Visual studio code  </li> </ul>"},{"location":"notes_de_cours/Section_0.0/#installation-de-visual-studio","title":"Installation de visual studio.","text":""},{"location":"notes_de_cours/Section_0.0/#voici-les-paquets-que-vous-devez-avoir-installes","title":"Voici les paquets que vous devez avoir install\u00e9s","text":"<ul> <li>Developpement .NET Desktop  </li> </ul>"},{"location":"notes_de_cours/Section_0.0/#dans-les-facultatifs","title":"Dans les facultatifs","text":"<ul> <li>Outils de d\u00e9veloppement pour .NET</li> </ul>"},{"location":"notes_de_cours/Section_0.0/#dans-les-composants-individuels","title":"Dans les composants individuels","text":"<ul> <li>.NET Runtime 8 (Prise en charge \u00e0 long terme)  </li> <li>.NET Runtime 9  </li> <li>Kit SDK .NET  </li> <li>Kit SDK .NET Framework 4.8  </li> <li>Pack de ciblage .NET Framework 4.7.2  </li> <li>C# et Visual Basic  </li> <li>Prise en charge du F# (non n\u00e9cessaire pour p2)  </li> <li>Type de donn\u00e9e CLR pour SQL Server  </li> <li>Compilateur Roslyn C# et Visual Basic  </li> <li>MSBuild  </li> </ul>"},{"location":"notes_de_cours/Semaine_1/","title":"R\u00e9vision du cours de programmation 1 et compl\u00e9ments d'information","text":""},{"location":"notes_de_cours/Semaine_1/#les-types-de-bases","title":"Les types de bases","text":""},{"location":"notes_de_cours/Semaine_1/#entiers","title":"Entiers","text":"Type Nombre d'octets Minimum Maximum Notes short 2 octets -32768 32767 ushort 2 octets 0 65535 int 4 octets -2 147 483 648 2 147 483 647 uint 4 octets 0 4 294 967 295 long 8 octets 9 223 372 036 854 775 808 9 223 372 036 854 775 807 ulong 8 octets 0 18 446 744 073 709 551 615"},{"location":"notes_de_cours/Semaine_1/#virgules","title":"Virgules","text":"Type Nombre d'octets Minimum Maximum precision float 4 octets \u00b11.5 x 10^\u221245 \u00b13.4 x 10^38 ~6-9 nombres double 8 octets \u00b15.0 \u00d7 10^\u2212324 \u00b11.7 \u00d7 10^308 ~15-17 nombres decimal 16 octets \u00b11.0 x 10^-28 \u00b17.9228 x 10^28 28-29 nombres"},{"location":"notes_de_cours/Semaine_1/#logiques","title":"Logiques","text":"Type Nombre d'octets Valeurs bool 1 octet true/false"},{"location":"notes_de_cours/Semaine_1/#textuels","title":"Textuels","text":"Type Nombre d'octets Notes char 2 octets 1 caract\u00e8re string 0 \u00e0 2,147,483,647 x 2 octets (char) 2 147 483 647 caract\u00e8res"},{"location":"notes_de_cours/Semaine_1/#binaires","title":"Binaires","text":"Type Nombre d'octets Notes byte 1 octets Valeurs de 0 \u00e0 255 sbyte 1 octet Valeurs de -128 \u00e0 127"},{"location":"notes_de_cours/Semaine_1/#les-tableaux-unidimentionnels","title":"Les tableaux unidimentionnels","text":""},{"location":"notes_de_cours/Semaine_1/#les-tableaux-multidimentionnels","title":"Les tableaux multidimentionnels","text":""},{"location":"notes_de_cours/Semaine_1/#les-tableaux-de-tableaux","title":"Les tableaux de tableaux","text":""},{"location":"notes_de_cours/Semaine_1/#les-structures-de-controle","title":"Les structures de controle","text":""},{"location":"notes_de_cours/Semaine_1/#if","title":"if","text":"simple if<pre><code>if (condition) \n{  \n    // Bloc de code \u00e0 ex\u00e9cuter si la condition retourne \"true\"  \n}  \nelse if (condition 2)  \n{ \n    /* bloc de code 2 */\n}\nelse\n{\n    /*bloc de code 3*/\n}\n</code></pre>"},{"location":"notes_de_cours/Semaine_1/#for","title":"for","text":"simple for<pre><code>   for (affirmation 1; affirmation 2; affirmation 3)  \n   {  \n      // Bloc de code \u00e0 ex\u00e9cuter si la condition retourne \"true\"  \n   }  \n</code></pre> <ul> <li>Affirmation 1 est ex\u00e9cut\u00e9 (une fois) avant l'ex\u00e9cution du bloc de code.  </li> <li>Affirmation 2 d\u00e9finie la condition pour que le bloc soit ex\u00e9cut\u00e9.  </li> <li>Affirmation 3 est ex\u00e9cut\u00e9 (chaque fois) apr\u00e8s que le bloc de code soit ex\u00e9cut\u00e9.  </li> </ul>"},{"location":"notes_de_cours/Semaine_1/#while","title":"while","text":"simple while<pre><code>   while (condition)  \n   {  \n      // Bloc de code \u00e0 ex\u00e9cuter si la condition retourne \"true\"  \n   }  \n</code></pre>"},{"location":"notes_de_cours/Semaine_1/#do-while","title":"do while","text":"<p>simple do while<pre><code>   do  \n   {  \n      // Bloc de code \u00e0 ex\u00e9cuter si la condition retourne \"true\"  \n   } while (condition) \n</code></pre> * \u00c0 noter que la boucle sera toujours ex\u00e9cut\u00e9 1 fois au minimum</p>"},{"location":"notes_de_cours/Semaine_1/#foreach","title":"foreach","text":"<ul> <li>En lecture seule seulement, aucune modification de la structure.</li> </ul> foreach - pour toutes les valeurs d'une collection<pre><code>   foreach(LeType nomVariable in laCollectionOuLeTableau)\n      // Bloc de code \u00e0 ex\u00e9cuter si la condition retourne \"true\"  \n   }\n\n   int[] lesNombres =  {1, 3, 5 };\n   foeach(int leNombre in lesNombres)\n   {\n      //utilisation de la varibale \"leNombre\" qui prendra les valeurs de 1, 3 et 5\n      Console.WriteLine(leNombre); //affichera 1, 3 et 5 en sautant une ligne\n   } \n</code></pre>"},{"location":"notes_de_cours/Semaine_1/#visual-studio-et-la-compilation","title":"Visual studio et la compilation","text":"<p>Lorsque visual studion fait la compilation de votre programme, soit par l'ex\u00e9cution, soit simplement par la g\u00e9n\u00e9ration (menu g\u00e9n\u00e9rer) le code est converti en langage interm\u00e9diaire (Intermediate language \"il\")  </p> <p>G\u00e9n\u00e9ralement, depuis programmation 1, vous compilez en mode debug.  </p> <p>Se faisant votre programme sera compil\u00e9 et assembl\u00e9 dans le dossier de votre solution sous [dossier de solution]/[dossier de Projet]/bin/debug/  </p> <p></p>"},{"location":"notes_de_cours/Semaine_1/#execution-dune-application-console-via-linvite-de-commande","title":"Ex\u00e9cution d'une application console via l'invite de commande","text":"<p>On peut d\u00e9marrer l'application en cliquant dessus, mais \u00e9galement en lancant l'ex\u00e9cutable via l'invite de commande.  </p> <p>Pour le pr\u00e9sent exemple j'ai utilis\u00e9 \"git bash\". J'aurais pu utiliser powershell ou encore l'invite de commande standard.</p> <p></p>"},{"location":"notes_de_cours/Semaine_1/#public-static-void-mainstring-args","title":"public static void Main(string[] args) ?","text":"Main<pre><code>   public static void Main(string[] args)\n   {\n      // afficher chacun des param\u00e8tres \u00e0 l'\u00e9cran\n      foreach(string parametre in args)\n      {\n         Console.WriteLine(parametre);\n      }\n   } \n</code></pre> <p>** notez les choses suivante : **  </p> <ul> <li>Rien de particulier pour param\u00e8tre 1 et 2</li> <li>Le param\u00e8tre 3 a \u00e9t\u00e9 coup\u00e9 en deux \u00e0 cause de l'espace</li> <li>Le param\u00e8tre 4 est correct puisqu'il est entre guillemets.</li> </ul> <p></p>"},{"location":"notes_de_cours/Semaine_1/#deboguage-avec-visual-studio-et-les-parametres","title":"D\u00e9boguage avec visual studio et les param\u00e8tres.","text":"<p>On peut lancer l'application dans visual studio en simulant que des param\u00e8tres ont \u00e9t\u00e9 ins\u00e9r\u00e9s dans l'invite de commande. pour se faire, on doit aller dans le menu D\u00e9boguer -&gt; Propri\u00e9t\u00e9s de d\u00e9boguage de [projet] -&gt; Arguments de la ligne de commande.  </p> <p>Ou encore  </p> <p>Par les propri\u00e9t\u00e9 du projet. Dans le menu de d\u00e9boggage. Les deux sont \u00e9quivalent. </p>"},{"location":"notes_de_cours/Semaine_1/#exercice-de-revision-p1-p2-utilisation-de-lia-ou-des-travaux-de-p1-interdit","title":"Exercice de r\u00e9vision p1 + p2 (Utilisation de l'ia ou des travaux de P1 interdit)","text":"<ol> <li>Faites vous un r\u00e9pertoire git avec un .gitignore pour c#. Je vous sugg\u00e8re  celui-ci 0.0 Faites vous un dossier pour travailler. 0.1 Lancez git bash dans le dossier et lancez -&gt; git init 0.2 Copiez votre fichier .gitignore dans le dossier 0.3 Faites git add .  0.4 Faites git commit -m \"Premier commit\" 0.5 Ensuite lancez votre visual studio dans le dossier git.  </li> </ol> <p>R\u00e8gles pour vos commit. 1 commit par fonctionnalit\u00e9 termin\u00e9e et test\u00e9e.</p> <ol> <li> <p>Faites une m\u00e9thode Afficher() qui prend en param\u00e8tre un tableau d'entiers et qui l'affiche \u00e0 l'\u00e9cran. Faites le summary associ\u00e9.  </p> </li> <li> <p>Faites une m\u00e9thode qui s'appelle Interchanger qui prends en param\u00e8tre un tableau d'entier et 2 nombre entiers. Les 2 nombres pass\u00e9s en param\u00e8tres sont les 2 index qui doivent \u00eatre interchang\u00e9.</p> </li> </ol> <p>Exemple Interchanger(monTableau, index1, index2);  </p> <p>Consid\u00e9rant le tableau suivant :  { 10, 20, 30, 40, 50 } Consid\u00e9rant les index 0 et 3 L'invocation de Interchanger(leTableau, 0, 3) interchange les valeurs \u00e0 l'index 0 et 3 soit :  </p> <p>{ 40, 20, 30, 10, 50 }  </p> <p>Vous avez vu les trois tris suivants: - Tri \u00e0 bulle - Tri selection   - Tri insertion  </p> <p>R\u00e9f\u00e9rence : Visualgo</p> <p>Codez 3 m\u00e9thodes avec leurs noms respectifs. Pouvant tri\u00e9 Avec les summarys tels que demand\u00e9s.  </p> <ol> <li>Faites la codification de du Main de fa\u00e7on \u00e0 ce que : 3.1 S'il n'y a aucun param\u00e8tres ou si les param\u00e8tres sont invalides, l'application se ferme en disant \"Param\u00e8tre invalide : la syntaxe doit \u00eatre....\" 3.2 l'application doit avoir comme premier parametres \"bulle\", \"insertion\" ou \"selection\" 3.3 l'application doit avoir en dernier parametres une s\u00e9rie d'entiers \u00e0 trier. 3.4 l'application doit utiliser Interchanger  </li> </ol> <p>Exemple : Trier.exe bulle 5 5 7 8 9 4 5 3 3 10 Doit afficher :  </p> <p> R\u00e9sultat Tri bulle : 3 3 4 5 5 5 7 8 9 10</p> <p>Exemple : Trier.exe bubulle 5 5 7 8 9 4 5 3 3 10 ou Trier.exe bubulle 5 5 7 8 Roger 4 5 3 3 10  </p> <p>Doit afficher :  </p> <p> R\u00e9sultat Param\u00e8tres invalide : la syntaxe doit \u00eatre Trier.exe [ bulle | insertion | selection ] {nombres...}</p>"},{"location":"notes_de_cours/Semaine_2/","title":"Cr\u00e9ation d'une solution multi-projets","text":"<p>G\u00e9n\u00e9ralement, une solution est compos\u00e9e de plusieurs projets. La raison est qu'on ne m\u00e9lange pas les projets qui font l'interaction avec l'utilisateur avec les projets qui sont la logique, le domaine, de l'application.</p> <p>G\u00e9n\u00e9ralement on retrouve 3 types de projets. - Les projet(s) d'interface avec l'utilisateur -&gt; Console / Graphique - Les projets de biblioth\u00e8que de classe - Les projets de tests unitaires  </p> <p>Pour bien saisir les 3 types de projet, r\u00e9capitulons les indices.</p> <ul> <li>\"Ne faites pas de Console.WriteLine partout !\"</li> </ul> <p>Effectivement, on veut s\u00e9parer la logique applicative de la logique d'affichage.  </p> <p>Prenons par exemple les tris que vous avez fait. Un tableau en d\u00e9sordre en entr\u00e9, un tableau en ordre en sortie. Il est nullement n\u00e9cessaire d'en faire l'affichage.</p> <p>Faisons notre premier projet qui contient les 3 projets n\u00e9cessaires \u00e0 faire un bon  d\u00e9veloppement.   </p> <p>Avant toute chose, r\u00e9visez l'onglet installation pour vous assurer que vous avez .NET 8 et .NET 9. </p> <p> </p>"},{"location":"notes_de_cours/Semaine_2/#_1","title":"Cr\u00e9ation du projet","text":"Program.cs<pre><code>// En entete de fichier on doit maintenant faire le bon using\n\nusing MaBibliotheque-9999999; // le namespace dans lequel la ou les classe(s) se retrouvent.\n</code></pre>"},{"location":"notes_de_cours/Semaine_2_importation/","title":"Solution \u00e0 plusieurs projets","text":""},{"location":"notes_de_cours/Semaine_2_importation/#importation-de-projet-dans-une-solution","title":"Importation de projet dans une solution","text":"<p>(Version \u062d\u0645\u064a\u0631)  </p>"},{"location":"notes_de_cours/Semaine_2_importation/#ajouter-le-dossier-du-projet-dans-le-dossier-de-solution","title":"Ajouter le dossier du projet dans le dossier de solution","text":""},{"location":"notes_de_cours/Semaine_2_importation/#ajouter-le-projet-a-la-solution","title":"Ajouter le projet \u00e0 la solution","text":""},{"location":"notes_de_cours/Semaine_2_importation/#ajouter-la-dependence-entre-les-projets","title":"Ajouter la d\u00e9pendence entre les projets","text":""},{"location":"notes_de_cours/Semaine_2_importation/#ajouter-le-using-pour-utiliser-les-classes-dans-lautre-espace-de-nom","title":"Ajouter le \"using\" pour utiliser les classes dans l'autre espace de nom","text":""},{"location":"notes_de_cours/Semaine_3/","title":"Semaine 3 - Debug.WriteLine","text":""},{"location":"notes_de_cours/Semaine_3/#utilisation-de-debugwriteline","title":"Utilisation de Debug.WriteLine","text":"<ul> <li>Activer la fen\u00eatre de sortie  </li> </ul> <ul> <li>Je vous recommande de la mettre avec vos espions</li> <li>Toutes les fen\u00eatres d'aide \u00e0 l'ex\u00e9cution sont disponibles dans le menu D\u00e9boggage -&gt; Fen\u00eatres. </li> </ul>"},{"location":"notes_de_cours/Semaine_3_1/","title":"Semaine 3.1 - Passage par valeur ou r\u00e9f\u00e9rence","text":"<p>Passage par copie ou par r\u00e9f\u00e9rence ?</p>"},{"location":"notes_de_cours/Semaine_3_1/#passage-par-copie","title":"Passage par copie","text":"<p>En programmation, vous passez g\u00e9n\u00e9ralement vos variables \u00e0 une m\u00e9thode par copie.</p> <p>Comme vu en classe, l'appel d'une m\u00e9thode avec un param\u00e8tre de type int ne modifie pas la valeur de la variable dans la m\u00e9thode Main(), et ce, m\u00eame si les variables ont le m\u00eame nom. <pre><code>public static void Main(string[] args)\n{\n   int a = 0;\n   M(a);\n   Console.WriteLine(a); // Ici, 'a' reste \u00e0 0.\n}\n\npublic static void M(int a)\n{\n   a = 8;\n}\n</code></pre> La raison de ce comportement est que M() re\u00e7oit une copie de la valeur de a dans le programme principal.</p> <p>Cependant, cela devient un peu plus complexe lorsque vous travaillez avec des tableaux ou des objets. <pre><code>public static void Main(string[] args)\n{\n   int[] a = {0, 1, 2, 3};\n   M(a);\n   Console.WriteLine(a[0]); // Ici, 'a[0]' sera 8.\n}\n\npublic static void M(int[] a)\n{\n   a[0] = 8;\n}\n</code></pre> Dans cet exemple, ce que re\u00e7oit M() n'est pas une copie de la valeur de a, mais une copie de la r\u00e9f\u00e9rence. Cela signifie que la variable a dans Main() et la variable a dans M() font r\u00e9f\u00e9rence \u00e0 la m\u00eame zone m\u00e9moire. Par cons\u00e9quent, lorsque a[0] est modifi\u00e9 dans M(), le tableau original dans Main() est directement affect\u00e9.</p> <p>Voici un autre exemple pour illustrer le fait qu'il s'agit bien d'une copie de la r\u00e9f\u00e9rence, et non de la valeur : <pre><code>public static void Main(string[] args)\n{\n   int[] a = {0, 1, 2, 3};\n   M(a);\n   Console.WriteLine(a[0]); // Ici, 'a[0]' restera 0.\n}\n\npublic static void M(int[] a)\n{\n   a = new int[10];  // 'a' est maintenant une nouvelle r\u00e9f\u00e9rence en m\u00e9moire.\n   a[0] = 10;  // Modifie uniquement ce nouveau tableau.\n}\n</code></pre> Dans cet exemple, la variable a dans Main() ne sera pas modifi\u00e9e. En effet, l'instruction new int[10] cr\u00e9e un nouveau tableau en m\u00e9moire, qui est r\u00e9f\u00e9renc\u00e9 par a dans M(). Cette nouvelle r\u00e9f\u00e9rence n'affecte pas la variable a dans Main(). Passage par r\u00e9f\u00e9rence</p>"},{"location":"notes_de_cours/Semaine_3_1/#passage-par-reference-avec-le-mot-ref","title":"Passage par r\u00e9f\u00e9rence avec le mot ref.","text":"<p>Il est \u00e9galement possible de demander \u00e0 une m\u00e9thode de modifier directement le contenu d'une variable, \u00e0 l'endroit m\u00eame o\u00f9 elle est stock\u00e9e en m\u00e9moire. Pour ce faire, il faut sp\u00e9cifier que la variable doit \u00eatre pass\u00e9e par r\u00e9f\u00e9rence.</p> <p>Le mot-cl\u00e9 ref permet de passer une variable par r\u00e9f\u00e9rence. <pre><code>public static void Main(string[] args)\n{\n   int a = 3;\n   M(ref a); // L'appel se fait avec 'ref'\n   Console.WriteLine(a); // Ici, 'a' sera 5.\n}\n\npublic static void M(ref int a) // La d\u00e9claration de 'a' se fait \u00e9galement avec 'ref'\n{\n   a = 5;  // 'a' est modifi\u00e9 directement dans la m\u00e9thode Main.\n}\n</code></pre> Dans cet exemple, la m\u00e9thode M re\u00e7oit la r\u00e9f\u00e9rence en m\u00e9moire de a. Cela permet \u00e0 M() de manipuler directement la valeur de a, et les modifications sont visibles dans la m\u00e9thode Main(). Le mot-cl\u00e9 out</p> <p>En C#, il existe \u00e9galement une autre fa\u00e7on de passer une variable par r\u00e9f\u00e9rence avec le mot-cl\u00e9 out.</p> <p>Les mots-cl\u00e9s ref et out remplissent un r\u00f4le similaire, c'est-\u00e0-dire passer une variable par r\u00e9f\u00e9rence. La diff\u00e9rence majeure r\u00e9side dans le fait que ref n\u00e9cessite que la variable soit initialis\u00e9e avant l'appel de la m\u00e9thode, tandis que out permet d'initialiser la variable directement dans la m\u00e9thode appel\u00e9e.</p> <p>Cela vous rappelle-t-il quelque chose ?</p>"},{"location":"notes_de_cours/Semaine_3_1/#passage-par-reference-avec-le-mot-cle-out","title":"Passage par r\u00e9f\u00e9rence avec le mot cl\u00e9 out","text":"<p>Voici un exemple utilisant out avec Int.TryParse : <pre><code>public static void Main(string[] args)\n{\n   int a;  // Non initialis\u00e9e\n   bool test = Int.TryParse(\"42\", **out** a);  // 'a' sera initialis\u00e9e ici.\n   Console.WriteLine(a);  // Affichera 42.\n}\n</code></pre> Notez que la variable a doit \u00eatre initialis\u00e9e \u00e0 l'int\u00e9rieur de la m\u00e9thode lorsque vous utilisez out.</p> <p>De m\u00eame, cela peut \u00eatre appliqu\u00e9 aux tableaux et autres objets : <pre><code>public static void Main(string[] args)\n{\n   int[] a;  // Non initialis\u00e9\n   M(out a);  // 'a' sera initialis\u00e9 dans M().\n}\n\nprivate static void M(out int[] a)\n{\n   a = new int[] {1, 2, 3};  // Initialisation de 'a' dans M().\n}\n</code></pre></p> <p>En revanche, essayer de faire la m\u00eame chose avec ref provoquera une erreur de compilation, car ref exige que la variable soit d\u00e9j\u00e0 initialis\u00e9e avant d'\u00eatre pass\u00e9e \u00e0 la m\u00e9thode.  </p> <p> </p> <p>R\u00e9sum\u00e9</p> <pre><code>- Passage par copie : La m\u00e9thode re\u00e7oit une copie de la valeur de la variable.  \n  Si la variable est un tableau ou un objet, la r\u00e9f\u00e9rence \u00e0 cette m\u00e9moire est copi\u00e9e,  \n  ce qui permet de modifier les donn\u00e9es, mais pas la r\u00e9f\u00e9rence elle-m\u00eame.\n\n- Passage par r\u00e9f\u00e9rence avec **ref** : Permet de modifier directement la variable  \n  dans la m\u00e9thode appelante. La variable est initialis\u00e9e avant l'appel.\n\n- Passage par r\u00e9f\u00e9rence avec **out** : Similaire \u00e0 ref, mais la variable est  \n  initialis\u00e9e dans la m\u00e9thode appel\u00e9e. Vous ne pouvez pas l'utiliser sans l'initialiser dans la m\u00e9thode.\n</code></pre>"},{"location":"notes_de_cours/section_1.1/","title":"Introduction aux bases de donn\u00e9es relationnelles","text":""},{"location":"notes_de_cours/section_1.1/#pourquoi-utiliser-des-bases-de-donnees","title":"Pourquoi utiliser des bases de donn\u00e9es?","text":"<ul> <li>Organiser de larges quantit\u00e9s de donn\u00e9es</li> <li>S\u00e9lectionner rapidement des informations dans de grands ensembles de donn\u00e9es </li> <li>Stocker de fa\u00e7on persistante des informations</li> </ul> <p>Abr\u00e9viation : BD = Base de donn\u00e9es / DB = Database</p>"},{"location":"notes_de_cours/section_1.1/#architecture-des-bases-de-donnees","title":"Architecture des bases de donn\u00e9es","text":"<p>Mod\u00e8le client-serveur</p> <p>La base de donn\u00e9es est h\u00e9berg\u00e9e sur un serveur auquel l'utilisateur (appel\u00e9 client) se connecte pour effectuer des manipulations. Ce client peut \u00eatre un logiciel client natif ou une application web.</p> <p></p>"},{"location":"notes_de_cours/section_1.1/#systemes-de-gestion-de-base-de-donnees","title":"Syst\u00e8mes de gestion de base de donn\u00e9es","text":"<p>Les syst\u00e8mes de gestion de base de donn\u00e9es (SGBD) sont des logiciels sp\u00e9cialis\u00e9s en gestion de donn\u00e9es.</p> <ul> <li>MySQL (libre \u2014 SQL \u2014 relationnelle)</li> <li>Microsoft SQL Server (propri\u00e9taire - SQL - relationelle)</li> <li>MongoDB (libre \u2014 No SQL)</li> <li>SQLite (libre \u2014 SQL \u2014 relationnelle/embarqu\u00e9e)</li> <li>PostgreSQL (libre \u2014 SQL \u2014 relationnelle)</li> <li>Oracle (propri\u00e9taire \u2014 SQL \u2014 relationnelle)</li> </ul>"},{"location":"notes_de_cours/section_1.1/#pourquoi-utiliser-un-sgbd-plutot-quun-systeme-de-fichier-local","title":"Pourquoi utiliser un SGBD plut\u00f4t qu'un syst\u00e8me de fichier local?","text":"<p>Les SGBD offrent :</p> <ul> <li>Une gestion limitant les redondances de donn\u00e9es</li> <li>Une meilleure organisation de l'information</li> <li>R\u00e8gles d'int\u00e9grit\u00e9 (validation des donn\u00e9es)</li> <li>Contr\u00f4le de la concurrence (explications: https://www.geeksforgeeks.org/concurrency-control-in-dbms/)</li> <li>Fiabilit\u00e9/R\u00e9cup\u00e9ration des donn\u00e9es/Journalisation</li> <li>Ind\u00e9pendance du stockage des donn\u00e9es par rapport \u00e0 l'application</li> </ul>"},{"location":"notes_de_cours/section_1.1/#processus-de-developpement-dune-bd","title":"Processus de d\u00e9veloppement d'une BD","text":"<p>Dans le cours BD1, nous nous int\u00e9resserons principalement \u00e0 l'\u00e9tape de construction.</p>"},{"location":"notes_de_cours/section_1.1/#interagir-avec-une-bd","title":"Interagir avec une BD","text":"<p>Afin d'interagir avec une BD on a besoin minimalement de deux langages :</p> <ul> <li>Un langage de d\u00e9finition des donn\u00e9es (LDD) permettant entre autres de cr\u00e9er et modifier les tables et leur structure.</li> <li>Un langage de manipulation des donn\u00e9es (LMD) permettant entre autres d'ajouter, modifier ou supprimer des lignes dans des tables.</li> </ul> <p>En surplus on peut utiliser un langage de contr\u00f4le de transaction, un de contr\u00f4le des donn\u00e9es, un de gestion des acc\u00e8s et plusieurs autres...</p> <p>Heureusement, le langage de programmation Structured Query Language (Langage de requ\u00eates structur\u00e9es) abr\u00e9g\u00e9 par SQL regroupe tous ces besoins.</p> <p>Le langage SQL (prononc\u00e9 parfois \"SEE-QWEL\" par les anglophones) permet de cr\u00e9er et manipuler des BD ainsi que de g\u00e9rer certains aspects relatifs aux transactions et aux autorisations.</p>"},{"location":"notes_de_cours/section_1.1/#origine-du-langage","title":"Origine du langage","text":"<p>La toute premi\u00e8re version du langage SQL a \u00e9t\u00e9 d\u00e9velopp\u00e9e chez IBM en 1970. En 1979, la compagnie Oracle pr\u00e9senta une version commercialement disponible au grand public. SQL fut rapidement imit\u00e9 et adopt\u00e9 par d'autres fournisseurs.</p> <p>La plupart des langages de programmation imp\u00e9ratifs que vous avez vu (C#, PHP, javascript ...) sont bas\u00e9s sur la th\u00e9orie de l'algorithmie. Mais SQL provient de la th\u00e9orie des ensembles. C'est un langage D\u00c9CLARATIF qui permet de d\u00e9crire le r\u00e9sultat escompt\u00e9, sans d\u00e9crire la mani\u00e8re de l'obtenir. Les SGBD (syst\u00e8mes de gestion de bases de donn\u00e9es) tel que SQL sont \u00e9quip\u00e9s d'optimiseurs de requ\u00eates - des m\u00e9canismes qui d\u00e9terminent automatiquement la mani\u00e8re optimale d'effectuer les op\u00e9rations, notamment par une estimation de la complexit\u00e9 algorithmique. (Source: https://fr.wikipedia.org/wiki/Structured_Query_Language)</p>"},{"location":"notes_de_cours/semaine2_git/","title":"Git","text":""},{"location":"notes_de_cours/semaine2_git/#la-commande-ultime","title":"La commande ultime","text":"Console<pre><code>git status\n</code></pre>"},{"location":"notes_de_cours/semaine2_git/#creation-dun-projet-git-local","title":"Cr\u00e9ation d'un projet git local","text":"Console<pre><code>git init\n</code></pre>"},{"location":"notes_de_cours/semaine2_git/#creation-dune-branche","title":"Cr\u00e9ation d'une branche","text":"Console<pre><code>git branch [le nom de la branche]  \n</code></pre>"},{"location":"notes_de_cours/semaine2_git/#changement-de-branche","title":"Changement de branche","text":"Console<pre><code>git checkout [le nom de la branche]  \n</code></pre>"},{"location":"notes_de_cours/semaine2_git/#afficher-toutes-les-branches","title":"Afficher toutes les branches","text":"Console<pre><code>git branch  \n</code></pre>"},{"location":"notes_de_cours/semaine2_git/#creer-et-changer-de-branche","title":"Cr\u00e9er et changer de branche","text":"Console<pre><code>git checkout -b [le nom de la branche]  \n</code></pre>"},{"location":"notes_de_cours/semaine2_git/#faire-une-soumission-de-code","title":"Faire une soumission de code","text":"Console<pre><code>git add [le fichiers ou le dossier]  \ngit commit -m \"Le message significatif\"  \n</code></pre>"},{"location":"notes_de_cours/semaine2_git/#revenir-en-arriere-quand-les-fichiers-sont-en-attente-de-la-soumission-staged","title":"Revenir en arri\u00e8re quand les fichiers sont en attente de la soumission (staged)","text":"Console<pre><code>git restore --staged [le fichier ou le dossiers]  \n</code></pre>"},{"location":"notes_de_cours/semaine2_git/#restauration-des-fichiers","title":"Restauration des fichiers","text":"<ul> <li>Vous avez modifier de quoi mais vous voulez revenir au dernier commit et perdre vos modifications) Console<pre><code>git reset --hard  \n</code></pre></li> </ul>"},{"location":"notes_de_cours/semaine2_git/#lister-les-soumissions","title":"Lister les soumissions","text":"Console<pre><code>git log  \ngit log --graph  \ngit log --oneline  \n</code></pre>"},{"location":"notes_de_cours/semaine2_git/#fusionner-2-branches","title":"fusionner 2 branches","text":"<ul> <li>Se placer dans la branche qui va recevoir (exemple main avec git checkout main)  </li> <li>faire git merge [nom de la branche \u00e0 aller chercher]  </li> <li>Prier que rien n'explose.  </li> </ul>"}]}