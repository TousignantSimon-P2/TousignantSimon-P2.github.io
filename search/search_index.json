{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Programmation 2 (420-2A6-VI) - Hiver 2025","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Vous trouverez ici les notes et exercices du cours. J'ajouterai du nouveau contenu continuellement.</p> <p>Pr\u00e9alable \u00e0 ce cours : 420-1D6-VI Programmation 1</p> <p>Ce cours est pr\u00e9alable \u00e0 : 420-4A6-VI : Programmation 3 420-3B3-VI : Jeux 2d 420-5A4-VI : Jeux 3d  420-4D4-VI : Applications mobiles 1 420-5B4-VI : Applications mobiles 2 420-3A3-VI : Nano-ordinateurs  </p> <p>Cheminement complet: https://informatique.apical.xyz/</p>"},{"location":"#environnement-de-travail","title":"Environnement de travail","text":"<p>Pour le cours vous avez deux logiciels \u00e0 installer:</p> <ul> <li>Visual studio community 2022</li> <li>Un \u00e9diteur de texte \u00e9volu\u00e9 tel notepad++ (recommand\u00e9) </li> <li>Git</li> </ul>"},{"location":"#visual-studio-community-2022","title":"Visual studio community 2022","text":"<p>Vous devez installer visual studio community uniquement avec les paquets essentiels au d\u00e9veloppement des applications de bureau. Les paquets tels que, mais non limit\u00e9s \u00e0, intellicode, intellisense, liveshare sont formellement proscrits. \u2003</p>"},{"location":"#notepad-ou-autre-editeur-compatible","title":"Notepad++ (ou autre \u00e9diteur compatible)","text":"<p>Parfois git vous demande de faire l'\u00e9ditions de fichiers tel que les commentaires pour les soumissions. (git commit). Il arrive \u00e9galement que des conflits soient pr\u00e9sent. Le logiciels permet de mieux travailler dans ces situations plus complexe.</p>"},{"location":"#git","title":"Git","text":"<p>Installation normale, portez attention \u00e0 l'\u00e9diteur par d\u00e9faut. Autrement, vous allez vous retrouver avec vim pour \u00e9diter vos fichiers</p>"},{"location":"#regles-de-classes-et-explications","title":"R\u00e8gles de classes et explications :","text":"<p>Petit rappel des r\u00e8gles au niveau de la P.D.E.A</p>"},{"location":"#conditions-pedagogiques-particulieres","title":"Conditions p\u00e9dagogiques particuli\u00e8res","text":"<p>Utilisation de g\u00e9n\u00e9rateur automatique :  </p> <p>Dans le cadre des activit\u00e9s acad\u00e9miques du cours, l'utilisation de g\u00e9n\u00e9rateurs de code automatiques, d'assistants d'IA tels que ChatGPT, Copilot ou tout autre outil similaire permettant la cr\u00e9ation automatique de contenu, la g\u00e9n\u00e9ration de code ou l\u2019assistance \u00e0 la r\u00e9solution d'exercices, est formellement interdite. Toute utilisation de ces outils durant un cours entra\u00eenera l'exclusion imm\u00e9diate de l'\u00e9l\u00e8ve de la p\u00e9riode concern\u00e9e.  </p>"},{"location":"#utilisation-des-cellulaires-ou-dappareils-mobiles-en-classe","title":"Utilisation des cellulaires ou d'appareils mobiles en classe","text":"<p>Toute utilisation d'appareil mobile tel que cellulaire, tablette ou console de jeux mobile est proscrite pendant le bloc horaire \u00e0 l'int\u00e9rieur du local. (Pr\u00e9cision : pauses incluses.) L'utilisation de tels appareils doit imp\u00e9rativement se faire hors du local afin de favoriser le climat d'apprentissage.  </p> <p>Les manquements aux articles pr\u00e9c\u00e9dents seront consign\u00e9s. Apr\u00e8s trois (3) exclusions, des d\u00e9marches administratives seront entreprises avec l'API afin de d\u00e9terminer les modalit\u00e9s de cheminement. Installation de Visual Studio Community 2022:</p> <p>Les seuls paquets autoris\u00e9s sont :</p> <ul> <li>Outils de d\u00e9veloppement d'application de bureau .NET</li> <li>Outils de d\u00e9veloppement .NET Framework 4.7.2</li> <li>C# et Visual Basic</li> </ul>"},{"location":"#environnement-numerique-dapprentissage-plateforme","title":"Environnement num\u00e9rique d\u2019apprentissage (plateforme)","text":"<ul> <li>Team</li> <li>Github</li> <li>Github classroom</li> </ul> <p>L'\u00e9l\u00e8ve a la responsabilit\u00e9 d'avoir un compte github avec un nom d'utilisateur r\u00e9pondant \u00e0 la norme suivante :</p> <p>cgpvicto-[son num\u00e9ro de DA]</p> <p>exemple : cgpvicto-9999999</p> <p>Une fois le compte github cr\u00e9\u00e9. On doit rejoindre le github classroom correspondant \u00e0 son groupe : gr. 00001 (mardi 13:15, vendredi 09:15) gr. 00002 (mardi 09:15, vendredi 13:15)</p>"},{"location":"convention/","title":"Convention de nommage C","text":""},{"location":"convention/#gardez-en-tete","title":"Gardez en t\u00eate","text":"<ul> <li>C# est sensible \u00e0 la casse</li> </ul>"},{"location":"convention/#regles-generales","title":"R\u00e8gles g\u00e9n\u00e9rales","text":"<ul> <li>Pensez approche K.I.S.S.</li> <li>Toujours : Les summarys</li> <li>Toujours commencer une m\u00e9thode par une lettre majuscule camelcase</li> <li>Toujours commencer une variable membre par _</li> <li>Toujours garder en t\u00eate de mettre priv\u00e9 par d\u00e9faut et public seulement si n\u00e9cessaire</li> <li>Toujours en fran\u00e7ais lorsque possible.</li> </ul>"},{"location":"convention/#definition-des-classes","title":"D\u00e9finition des classes","text":"<ul> <li>Commence par un summary</li> <li>Comence par une majuscule</li> <li>Doit avoir une visibilit\u00e9 d\u00e9finie</li> <li>Aucun _ dans le nom</li> <li> <p>Doit \u00eatre en francais</p> <p> ** L'ordre des choses est la suivante **</p> <ul> <li>D\u00e9claration de la classe  </li> <li>D\u00e9claration des variable membres  </li> <li>D\u00e9claration des constructeurs  </li> <li>D\u00e9claration des m\u00e9thodes  </li> <li>D\u00e9claration des impl\u00e9mentations d'interface  </li> <li>D\u00e9claration de la m\u00e9thode ToString()  </li> </ul> </li> </ul>"},{"location":"convention/#definition-des-methodes","title":"D\u00e9finition des m\u00e9thodes.","text":"<ul> <li>Commence par un summary</li> <li>Comence par une majuscule</li> <li>Doit avoir une visibilit\u00e9 d\u00e9finie</li> <li>Aucun _ dans le nom</li> </ul>"},{"location":"convention/#noms-des-variables","title":"Noms des variables","text":"<ul> <li>Variable membre<ul> <li>Commence par un _ si c'Est une variable membre</li> <li>Casse chameau</li> <li>Commentaire si la variable n\u00e9cessite une pr\u00e9cision sur ces limites de valeurs, r\u00f4le, etc.</li> </ul> </li> <li>Variable standard<ul> <li>Casse chameau</li> <li>Pas de _ dans le nom de la variable</li> </ul> </li> </ul>"},{"location":"convention/#commentaires","title":"Commentaires","text":"<ul> <li>N\u00e9cessaire pour les ent\u00eate de classe et de m\u00e9thode sous la forme de summary</li> </ul>"},{"location":"horaire/","title":"Horaire du cours de programmation 2","text":"Semaine Cours Date Sections Mati\u00e8re Bloc Travail \u00e0 faire Remises 1 1 2025-01-17 2 2025-01-21 2 3 2025-01-24 4 2025-01-28 3 5 2025-01-31 6 2025-02-04 4 7 2025-02-07 Formatif formel 8 2025-02-11 Retour formatif 5 9 2025-02-14 10 2025-02-18 6 11 2025-02-21 Examen 1 12 2025-02-25 7 13 2025-02-28 14 2025-03-11 8 15 2025-03-14 16 2025-03-18 9 17 2025-03-21 18 2025-03-28 10 19 2025-04-01 20 2025-04-04 Examen 2 11 21 2025-04-08 22 2025-04-11 12 23 2025-04-15 24 2025-04-22 13 25 2025-04-24 26 2025-04-29 14 27 2025-05-06 28 2025-05-09 15 29 2025-05-13 30 2025-05-16 Examen final"},{"location":"ressources/","title":"Ressources","text":""},{"location":"ressources/#documentation-officielle","title":"Documentation officielle","text":"<p>C# documentation officielle : https://learn.microsoft.com/fr-ca/dotnet/csharp/tour-of-csharp/</p> <p>.Net 8.0 : https://learn.microsoft.com/fr-ca/dotnet/api/?view=net-8.0</p> <p>.Net 9.0 : https://learn.microsoft.com/fr-ca/dotnet/api/?view=net-9.0</p> <p>Tests unitaires MSTest : https://learn.microsoft.com/fr-ca/dotnet/core/testing/unit-testing-with-mstest </p> <p>Table ASCII : https://www.asciitable.com/</p>"},{"location":"exercices/exercice_formatif_formel/","title":"Formatif Formel","text":""},{"location":"exercices/exercice_formatif_formel/#exercice-formatif-formel","title":"Exercice formatif formel.","text":""},{"location":"exercices/exercice_formatif_formel/#vous-devez-tracer-votre-progression-en-utilisant-git","title":"Vous devez tracer votre progression en utilisant git","text":""},{"location":"exercices/exercice_formatif_formel/#question-1-organisation-de-solution-multi-projet","title":"Question 1 - Organisation de solution multi-projet","text":"<pre><code>- Faites une solution visual studio FormatifFormel contenant   \n    - Une projet console nomm\u00e9 ProgramPrincipal  \n    - Une biblioth\u00e8que de classes nomm\u00e9e FormatifFormel-9999999 (*votre DA)\n</code></pre>"},{"location":"exercices/exercice_formatif_formel/#question-2-creation-dune-methode","title":"Question 2 - Cr\u00e9ation d'une m\u00e9thode","text":"<pre><code>- Faites une classe OutilsFormatifFormel avec :  \n    - Une m\u00e9thode statique AFaire qui prends en param\u00e8tre un tableau de string nomm\u00e9 phrase  \n    - La m\u00e9thode n'est pas impl\u00e9ment\u00e9e.\n</code></pre>"},{"location":"exercices/exercice_formatif_formel/#question-3-connexion-inter-projet","title":"Question 3 - Connexion inter-projet","text":"<pre><code>- Faites en sorte que le programme principal puisse appeller la m\u00e9thode AFaire  \n- Il est souhait\u00e9 que le programme principal plante lors que la m\u00e9thode est appell\u00e9e.\n</code></pre>"},{"location":"exercices/exercice_formatif_formel/#question-4-algorithmie","title":"Question 4 - Algorithmie","text":"<pre><code>- Importez votre biblioth\u00e8que de classe pour la gestion des tableaux que vous avez faites en classe.  \n- Vous pouvez utiliser les m\u00e9thodes de cette derni\u00e8re pour r\u00e9soudre le probl\u00e8me suivant :  \n- Dans la classe OutilsFormatifFormel faites l'impl\u00e9mentation de la m\u00e9thode avec la signature string Fusion(string[])  \n- La m\u00e9thode prend chacun des mots dans le tableau de string et fusionne les mots avec des espaces pour faire une phrase exemple {\"Bonjour\", \",\", \"tr\u00e8s\",\"appr\u00e9ci\u00e9s\", \"\u00e9tudiants\"}  \n    - Particularit\u00e9, si c'est une virgule, la syntaxe c'est \"mot, \" (mot virgule espace)  \n    - Si c'est deux mots la syntaxe c'est \"mot mot\" (mot espace mot)\n</code></pre>"},{"location":"exercices/exercice_formatif_formel/#question-5-appel-avec-arguments","title":"Question 5 - Appel avec arguments.","text":"<pre><code>- Faites les modifications n\u00e9cessaires pour que la sources des mots soit pass\u00e9e en param\u00e8tre  \npar l'utilisateur \u00e0 l'appel du programme. :  \nExemple : ProjetConsole.exe bonjours \",\" tr\u00e8s chers \u00e9tudiants\n</code></pre>"},{"location":"exercices/exercice_formatif_formel/#verification-et-continuation","title":"V\u00e9rification et continuation","text":"<p>Pour les zigotos qui sont plus avanc\u00e9s. La liste de v\u00e9rification est dans la boite cach\u00e9e ci-bas. Si votre solution est aux normes, voici ce que vous pouvez faire. Comme \u00e0 l'habitude je ne vous fais pas coder quelque chose pour rien...</p> Question 7, 8 - Exigeance suppl\u00e9mentaire pour nourrir l'\u00e2me affam\u00e9s <p>Question 7 - Faites une m\u00e9thode avec la signature suivante \"int[] Fusion(int[] a, int[] b) - La m\u00e9thode assume que les 2 tableaux sont d\u00e9j\u00e0 tri\u00e9s en ordre croissant. - La m\u00e9thode fusionne les 2 tableaux en 1 seul tableau :     - Exemple {1, 3, 5, 7, 9} et {0, 2, 4, 6, 8} va retourner un tableau contenant : {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}     - {4, 5, 6} {1, 2, 3, 7, 8, 9} va retourner {1, 2, 3, 4, 5, 6, 7, 8, 9} - Astuce : placez vous 2 curseurs: 1 sur chacun des tableaux \u00e0 l'index 0 :)   Question 8 - Si toi, padawan exp\u00e9riment\u00e9, a r\u00e9ussi \u00e0 dominer ce probl\u00e8me... - Voici la nouvelle m\u00e9thode -&gt; Fusion(int[] espaceDeTravail, int indexLimiteBasse, int mid, indexLimiteHaute) - D\u00e9finition : On ne travail plus qu'avec un tableau... - Donc : tableau = {7,8,9,1,2,3} -&gt; on appelle Fusion avec Fusion(tableau, 0, 3, 5) - d\u00e9clarez vous un tableau de travail de la longueur du tableau en param\u00e8tre. - l'algorithme compare en premier l'index 0 et l'index 3 et interverti si n\u00e9cessaire. le but est de fusionner en place et en ordre ;) - le r\u00e9sultat reste {1, 2, 3, 7, 8, 9} - recopiez le r\u00e9sultat dans le tableau d'orgine.</p> Liste de v\u00e9rification <ul> <li> <p>Une branche de developpement </p> <ul> <li>git log permet de voir qu'un commit est fait pour chacune des m\u00e9thodes.  </li> </ul> </li> <li> <p>Les summarys sont pr\u00e9sents pour chacune des classes et chacune des m\u00e9thodes incluant:  </p> <ul> <li>La description de la m\u00e9thode (m\u00eame pour celle \"AFaire\")  </li> <li>Les param\u00e8tres sont bien d\u00e9finis et expliqu\u00e9 en ce qui attrait \u00e0 leurs limite de valeurs possibles  </li> </ul> </li> <li>Les classes commencent par une majuscule. (Casse chameau)  </li> <li>Les m\u00e9thodes commencent par une majuscule. (Casse chameau)  </li> <li>Toutes les variables sont en minuscule  </li> <li>L'appel de la m\u00e9thode AFaire lance l'exception \"NotImplementedExeption\"  <ul> <li>Un message d'erreur significatif est lanc\u00e9  </li> </ul> </li> <li>Les v\u00e9rifications sanitaires sont faites pour la chaine de param\u00e8tre pour s'assurer qu'elle n'est pas vide ni null  </li> <li>Les d\u00e9pendances entre les projets sont pr\u00e9sentes.  </li> <li>Les using n\u00e9cessaires sont d\u00e9clar\u00e9s.  </li> </ul>"},{"location":"exercices/exercice_test_unitaires1/","title":"Exercice Test unitaires","text":""},{"location":"exercices/exercice_test_unitaires1/#pour-la-file-les-tests-a-trouver-pour-les-cas-dutilisations-suivants","title":"Pour la file, les tests \u00e0 trouver pour les cas d'utilisations suivants :","text":"<p>File doit avoir / faire.</p> <ul> <li> <p>Constructeur</p> <ul> <li>Cr\u00e9ation avec une longueur d\u00e9finie</li> <li>Cr\u00e9ation sans limite -&gt; on peut ins\u00e9rer jusqu'\u00e0 l'explosion.</li> <li>Cr\u00e9ation d'une File avec un tableau ex. 1 2 3 4 5 doit sortir en ligne 1 2 3 4 5   De facto, le premier \u00e0 sortir est la valeur \u00e0 l'index 0.</li> <li>N'est pas permise une telle ab\u00e9ration zigotienne que de faire une file de   longueur 0.   -&gt; Donc, un tableau null ou de longueur 0 proscrit.</li> </ul> </li> <li> <p>Op\u00e9rations</p> <ul> <li> <p>Enfiler \u00e0 la fin de la file d'attente</p> <ul> <li>Si la file est pleine -&gt; InvalidOperationException(\"file pleine\");</li> <li>Si la file est pleine.... mais de longueur non d\u00e9finie...</li> <li>Si la file est d\u00e9fini \u00e0 partir d'un tableau.... </li> </ul> </li> <li> <p>D\u00e9filer</p> <ul> <li>Retirer/effacer l'\u00e9l\u00e9ment au d\u00e9but de la File</li> <li>Retourne l'\u00e9l\u00e9ment retir\u00e9</li> <li>D\u00e9filer une file vide -&gt; InvalidOperationException(\"file vide\");</li> </ul> </li> <li> <p>Observer</p> <ul> <li>Retourne le premier \u00e9l\u00e9ment. Sans effacer de la File</li> <li>Observer une file vide -&gt; InvalidOperationException(\"file vide\");</li> </ul> </li> <li> <p>Reinitialiser </p> <ul> <li>Retirer toutes les donn\u00e9es de la file</li> <li>Ne retourne rien</li> </ul> </li> </ul> </li> </ul> <p>Accesseurs </p> <pre><code>- Taille de la file\n- Nombre d'\u00e9l\u00e9ments dans la file\n- Vide ? bool\u00e9en\n- Pleine ? bool\u00e9en.\n</code></pre>"},{"location":"exercices/exercice_test_unitaires1/#definition-des-tests","title":"D\u00e9finition des tests","text":"<p>D\u00e9finition des test pour la classe File  </p> <p>// ----------- Constructeurs -------------------//</p> <p>Constructeur avec un parametre de taille. </p> <pre><code>  Je dois tester que :  \n- * Une taille n\u00e9gative ou de longueur 0 doit lancer ArgumentOutOfRangeException  \n- Pour une file cr\u00e9e de taille N la propri\u00e9t\u00e9 capacit\u00e9 doit \u00eatre de N  \n- La propri\u00e9t\u00e9 vide doit \u00eatre true  \n- La propri\u00e9t\u00e9 pleine doit \u00eatre false  \n- Le nombre d'\u00e9l\u00e9ment doit \u00eatre 0   \n- La propri\u00e9t\u00e9 infinie doit \u00eatre false\n</code></pre> <p>Constructeur avec un parametre tableau (capacit\u00e9 == longueur du tableau)</p> <pre><code>  Je dois tester que :  \n- * Passer un tableau null lance ArgumentNullException  \n- * Passer un tableau avec une longueur de 0 doit lancer ArgumentException  \n- La file doit avoir capacit\u00e9 N pour un tableau de N de long  \n- Le nombre d'\u00e9l\u00e9ments pour un tableau de N de long doit \u00eatre de N  \n- La propri\u00e9t\u00e9 vide est \u00e0 false  \n- La propri\u00e9t\u00e9 pleine est \u00e0 true  \n- La propri\u00e9t\u00e9 infinie est \u00e0 false  \n- Observer retourne l'\u00e9l\u00e9ment au tableau[0]  \n- La modification de tableau[0] apr\u00e8s le new de la file ne change pas la valeur  \n  retourn\u00e9 par Observer();\n</code></pre> <p>Constructeur sans param\u00e8tre (noter : capacit\u00e9 infinie)</p> <pre><code>  Je dois tester que :\n- La propri\u00e9t\u00e9 vide doit \u00eatre true\n- La propri\u00e9t\u00e9 pleine doit \u00eatre false\n- Le nombre d'\u00e9l\u00e9ment doit \u00eatre 0 \n- La propri\u00e9t\u00e9 infinie doit \u00eatre true\n</code></pre> <p>// ----------- M\u00e9thodes -----------//</p> <p>Pour une file de longueur d\u00e9finie File vide</p> <pre><code>- Ajouter un \u00e9l\u00e9ment change l'\u00e9tat de la file de la fa\u00e7on suivante :\n- Vide devient false\n- Pleine reste false\n- Nombre d'\u00e9l\u00e9ment == 1\n- Observer retourne l'\u00e9l\u00e9ment Enfil\u00e9\n- Infini est \u00e0 false\n- La capacit\u00e9 ne change pas.\n</code></pre> <p>File pas vide</p> <pre><code>- Le nombre d'\u00e9l\u00e9ment devient nombre d'\u00e9l\u00e9ment + 1\n- capacit\u00e9 change pas\n- plein est faux\n- vide est faux\n- infini est faux\n- observer retourne le premier \u00e9l\u00e9ment d'origine. (apr\u00e8s cr\u00e9ation : pour tester que l'insertion n'est pas invers\u00e9)\n</code></pre> <p>File presque pleine -&gt; nombre d'\u00e9l\u00e9ment == capacit\u00e9 - 1  </p> <pre><code>- Le nombre d'\u00e9l\u00e9ment devient nombre d'\u00e9l\u00e9ment + 1\n- capacit\u00e9 change pas\n- plein devient true\n- vide reste faux\n- infini reste faux\n- observer retourne le premier \u00e9l\u00e9ment d'origine. (apr\u00e8s cr\u00e9ation : pour tester que l'insertion n'est pas invers\u00e9)\n</code></pre> <p>File pleine</p> <pre><code>- Ajouter un \u00e9l\u00e9ment dans une file pleine lance InvalidOperationException\n</code></pre> <p>File infinie </p> <pre><code>- Nombre d'\u00e9l\u00e9ment : 0\n- Plein : false\n- Vide : True\n- Capacit\u00e9 : -1\n- On peut ins\u00e9rer un nombre cons\u00e9quent (10k \u00e9l\u00e9ments) et v\u00e9rifier que \u00e7a fonctionne bien.\n</code></pre> <p>D\u00e9filer</p> <p>File pleine</p> <pre><code>- Observer retourne X\n- D\u00e9filer retourne X et observer subs\u00e9quemment retourne le prochain.\n- Nombre d'\u00e9l\u00e9ment = nombre d'\u00e9l\u00e9ment -1\n- capacit\u00e9 change pas\n- vide false\n- plein passe de true \u00e0 false\n</code></pre> <p>File vide</p> <pre><code>- Lance InvalidOperationException\n</code></pre> <p>~50% plein</p> <pre><code>- Observer retourne X  \n- D\u00e9filer retourne X et observer subs\u00e9quemment retourne le prochain.  \n- Nombre d'\u00e9l\u00e9ment = nombre d'\u00e9l\u00e9ment -1  \n- capacit\u00e9 change pas  \n- vide est \u00e0 false   \n- infini reste true si c'est file infinie, sinon reste \u00e0 false.\n</code></pre>"},{"location":"exercices/exercices_semaine_2/","title":"Exercice 2","text":"<ul> <li>Faire un d\u00e9p\u00f4t Git dans un dossier de votre choix. (git init)</li> <li>Ajouter le .gitignore pour Visual Studio (sur Google VisualStudio.gitignore -&gt; renommez-le)</li> <li>Cr\u00e9er une solution Visual Studio avec 2 projets \u00e0 l'int\u00e9rieur (Nommons-la Exercice2)<ul> <li>Un projet console .NET 8</li> <li>Une biblioth\u00e8que de classes MesOutils-9999999 (avec votre DA)</li> </ul> </li> </ul>"},{"location":"exercices/exercices_semaine_2/#decoupage-du-probleme","title":"D\u00e9coupage du probl\u00e8me","text":"<ul> <li>Dans une branche devParceQueSimonLeDemande, faites la codification des \u00e9l\u00e9ments suivants :<ul> <li>Une classe statique \"OutilTableaux\" avec les m\u00e9thodes statiques suivantes :</li> <li>G\u00e9n\u00e9rer un tableau avec une taille donn\u00e9e.</li> <li>G\u00e9n\u00e9rer un tableau avec une taille donn\u00e9e, un minimum pour les valeurs inclus, un maximum inclusif.</li> <li>Inverser un tableau nomm\u00e9 Inverser.</li> <li>D\u00e9caler vers la droite un tableau sans rotation d'un nombre d'\u00e9l\u00e9ments.</li> <li>D\u00e9caler vers la gauche un tableau sans rotation d'un nombre d'\u00e9l\u00e9ments.</li> <li>D\u00e9caler vers la droite un tableau avec rotation d'un nombre d'\u00e9l\u00e9ments.</li> <li>D\u00e9caler vers la gauche un tableau avec rotation d'un nombre d'\u00e9l\u00e9ments.</li> <li>Copier un tableau \u00e0 l'identique.</li> <li>Extraire un sous-tableau d'un tableau \u00e0 partir d'un index x \u00e0 un index y et le recopier dans un tableau de destination \u00e0 partir d'un index z.</li> <li>Trier avec bulle, insertion et s\u00e9lection doit \u00eatre d\u00e9plac\u00e9 dans cette biblioth\u00e8que.</li> <li>Faite la d\u00e9claration seulement de TriRadix avec les arguments et lever l'exception n\u00e9cessaire.</li> <li>Faites la d\u00e9claration de la classe File avec comme m\u00e9thode \"Enfiler, Defiler et Observer\". Lever les exceptions n\u00e9cessaires.</li> </ul> </li> </ul>"},{"location":"exercices/exercices_semaine_2/#_1","title":"Exercice 2","text":"<ul> <li> Les v\u00e9rifications sanitaires doivent \u00eatre faites pour chaque m\u00e9thode.</li> <li> Les r\u00e9sum\u00e9s doivent \u00eatre pr\u00e9sents pour chaque m\u00e9thode.</li> <li> On ne laisse pas tra\u00eener d'espace blanc pour rien.</li> <li> Si on a du code qui se duplique, on le factorise dans une m\u00e9thode \u00e0 part.</li> <li> Le code dupliqu\u00e9 doit \u00eatre factoris\u00e9.</li> </ul>"},{"location":"exercices/exercices_tri_radix.md/","title":"Exercice 3 - Tri radix","text":"<ul> <li>Une fois l'exercice 2 compl\u00e9t\u00e9 :  </li> </ul>"},{"location":"exercices/exercices_tri_radix.md/#reorganisation-des-fichiers","title":"R\u00e9organisation des fichiers","text":"<ul> <li>Placez-vous dans la branche \"main\" et fusionnez \"merge\" la branche de developpement  </li> <li>\u00c0 partir de cette branche main -&gt; faites une branche \"Tri\"  <ul> <li>R\u00e9organisez vos fichiers de fa\u00e7on \u00e0 ce que :  </li> <li>Dans une classe Tris il y ait -&gt; bubble, insertion, selection et radix    </li> <li>radix va lancer l'exception de non impl\u00e9mentation pour le moment.  </li> <li>La classe Tris va \u00eatre dans les namespace Outils_9999999.Tris  </li> <li>Faites la classe OutilsTableaux et d\u00e9placez y les m\u00e9thodes n\u00e9cessaires.  </li> <li>La classe Tris va \u00eatre dans les namespace Outils_9999999.Tableaux</li> <li>Les m\u00e9thodes qui ne sont pas utiles \u00e0 l'ext\u00e9rieur de la classe doivent \u00eatre \"private\"   </li> </ul> </li> </ul>"},{"location":"exercices/exercices_tri_radix.md/#programmation","title":"Programmation","text":"<ul> <li>Avec des m\u00e9thode de niveau priv\u00e9 de cette classe Tri:<ul> <li>Craquez le probl\u00e8me ExtraireNombre(nombre, position) avec (nombre/10^pos)%10 :</li> <li>Cr\u00e9er un dossier dans votre projet nomm\u00e9 \"StructureDeDonnee\"</li> <li>Faites la classe File  </li> <li>La classe File doit contenir :<ul> <li>Un tableau de int  </li> <li>Une variable membre index repr\u00e9sentant le d\u00e9but de file  </li> <li>Une variable membre index repr\u00e9sentant la fin de file</li> <li>Un constructeur qui re\u00e7oit en param\u00e8tre une longueur.</li> <li>Une m\u00e9thode void Enfiler(int)</li> <li>Une m\u00e9thode int Defiler()</li> <li>Une m\u00e9thode int Observer()</li> <li>Un accesseur Vide</li> <li>Un accesseur Plein</li> </ul> </li> </ul> </li> </ul>"},{"location":"exercices/exercices_tri_radix.md/#_1","title":"Exercice 3 - Tri radix","text":"<ul> <li> Les v\u00e9rifications sanitaires doivent \u00eatre faites pour chaque m\u00e9thode.</li> <li> Les r\u00e9sum\u00e9s doivent \u00eatre pr\u00e9sents pour chaque m\u00e9thode.</li> <li> On ne laisse pas tra\u00eener d'espace blanc pour rien.</li> <li> Si on a du code qui se duplique, on le factorise dans une m\u00e9thode \u00e0 part.</li> <li> Le code dupliqu\u00e9 doit \u00eatre factoris\u00e9.</li> <li> Un \"commit\" par version qui compile.</li> </ul>"},{"location":"notes_de_cours/Section_0.0/","title":"Outils de developpement \u00e0 avoir","text":""},{"location":"notes_de_cours/Section_0.0/#git","title":"git","text":"<ul> <li>Installer la derni\u00e8re version de git pour windows</li> </ul>"},{"location":"notes_de_cours/Section_0.0/#editeur-de-texte","title":"\u00e9diteur de texte","text":"<ul> <li>Notepad++ recommand\u00e9.  </li> <li>Visual studio code  </li> </ul>"},{"location":"notes_de_cours/Section_0.0/#installation-de-visual-studio","title":"Installation de visual studio.","text":""},{"location":"notes_de_cours/Section_0.0/#voici-les-paquets-que-vous-devez-avoir-installes","title":"Voici les paquets que vous devez avoir install\u00e9s","text":"<ul> <li>Developpement .NET Desktop  </li> </ul>"},{"location":"notes_de_cours/Section_0.0/#dans-les-facultatifs","title":"Dans les facultatifs","text":"<ul> <li>Outils de d\u00e9veloppement pour .NET</li> </ul>"},{"location":"notes_de_cours/Section_0.0/#dans-les-composants-individuels","title":"Dans les composants individuels","text":"<ul> <li>.NET Runtime 8 (Prise en charge \u00e0 long terme)  </li> <li>.NET Runtime 9  </li> <li>Kit SDK .NET  </li> <li>Kit SDK .NET Framework 4.8  </li> <li>Pack de ciblage .NET Framework 4.7.2  </li> <li>C# et Visual Basic  </li> <li>Prise en charge du F# (non n\u00e9cessaire pour p2)  </li> <li>Type de donn\u00e9e CLR pour SQL Server  </li> <li>Compilateur Roslyn C# et Visual Basic  </li> <li>MSBuild  </li> </ul>"},{"location":"notes_de_cours/Semaine_1/","title":"R\u00e9vision du cours de programmation 1 et compl\u00e9ments d'information","text":""},{"location":"notes_de_cours/Semaine_1/#les-types-de-bases","title":"Les types de bases","text":""},{"location":"notes_de_cours/Semaine_1/#entiers","title":"Entiers","text":"Type Nombre d'octets Minimum Maximum Notes short 2 octets -32768 32767 ushort 2 octets 0 65535 int 4 octets -2 147 483 648 2 147 483 647 uint 4 octets 0 4 294 967 295 long 8 octets 9 223 372 036 854 775 808 9 223 372 036 854 775 807 ulong 8 octets 0 18 446 744 073 709 551 615"},{"location":"notes_de_cours/Semaine_1/#virgules","title":"Virgules","text":"Type Nombre d'octets Minimum Maximum precision float 4 octets \u00b11.5 x 10^\u221245 \u00b13.4 x 10^38 ~6-9 nombres double 8 octets \u00b15.0 \u00d7 10^\u2212324 \u00b11.7 \u00d7 10^308 ~15-17 nombres decimal 16 octets \u00b11.0 x 10^-28 \u00b17.9228 x 10^28 28-29 nombres"},{"location":"notes_de_cours/Semaine_1/#logiques","title":"Logiques","text":"Type Nombre d'octets Valeurs bool 1 octet true/false"},{"location":"notes_de_cours/Semaine_1/#textuels","title":"Textuels","text":"Type Nombre d'octets Notes char 2 octets 1 caract\u00e8re string 0 \u00e0 2,147,483,647 x 2 octets (char) 2 147 483 647 caract\u00e8res"},{"location":"notes_de_cours/Semaine_1/#binaires","title":"Binaires","text":"Type Nombre d'octets Notes byte 1 octets Valeurs de 0 \u00e0 255 sbyte 1 octet Valeurs de -128 \u00e0 127"},{"location":"notes_de_cours/Semaine_1/#les-tableaux-unidimentionnels","title":"Les tableaux unidimentionnels","text":""},{"location":"notes_de_cours/Semaine_1/#les-tableaux-multidimentionnels","title":"Les tableaux multidimentionnels","text":""},{"location":"notes_de_cours/Semaine_1/#les-tableaux-de-tableaux","title":"Les tableaux de tableaux","text":""},{"location":"notes_de_cours/Semaine_1/#les-structures-de-controle","title":"Les structures de controle","text":""},{"location":"notes_de_cours/Semaine_1/#if","title":"if","text":"simple if<pre><code>if (condition) \n{  \n    // Bloc de code \u00e0 ex\u00e9cuter si la condition retourne \"true\"  \n}  \nelse if (condition 2)  \n{ \n    /* bloc de code 2 */\n}\nelse\n{\n    /*bloc de code 3*/\n}\n</code></pre>"},{"location":"notes_de_cours/Semaine_1/#for","title":"for","text":"simple for<pre><code>   for (affirmation 1; affirmation 2; affirmation 3)  \n   {  \n      // Bloc de code \u00e0 ex\u00e9cuter si la condition retourne \"true\"  \n   }  \n</code></pre> <ul> <li>Affirmation 1 est ex\u00e9cut\u00e9 (une fois) avant l'ex\u00e9cution du bloc de code.  </li> <li>Affirmation 2 d\u00e9finie la condition pour que le bloc soit ex\u00e9cut\u00e9.  </li> <li>Affirmation 3 est ex\u00e9cut\u00e9 (chaque fois) apr\u00e8s que le bloc de code soit ex\u00e9cut\u00e9.  </li> </ul>"},{"location":"notes_de_cours/Semaine_1/#while","title":"while","text":"simple while<pre><code>   while (condition)  \n   {  \n      // Bloc de code \u00e0 ex\u00e9cuter si la condition retourne \"true\"  \n   }  \n</code></pre>"},{"location":"notes_de_cours/Semaine_1/#do-while","title":"do while","text":"<p>simple do while<pre><code>   do  \n   {  \n      // Bloc de code \u00e0 ex\u00e9cuter si la condition retourne \"true\"  \n   } while (condition) \n</code></pre> * \u00c0 noter que la boucle sera toujours ex\u00e9cut\u00e9 1 fois au minimum</p>"},{"location":"notes_de_cours/Semaine_1/#foreach","title":"foreach","text":"<ul> <li>En lecture seule seulement, aucune modification de la structure.</li> </ul> foreach - pour toutes les valeurs d'une collection<pre><code>   foreach(LeType nomVariable in laCollectionOuLeTableau)\n      // Bloc de code \u00e0 ex\u00e9cuter si la condition retourne \"true\"  \n   }\n\n   int[] lesNombres =  {1, 3, 5 };\n   foeach(int leNombre in lesNombres)\n   {\n      //utilisation de la varibale \"leNombre\" qui prendra les valeurs de 1, 3 et 5\n      Console.WriteLine(leNombre); //affichera 1, 3 et 5 en sautant une ligne\n   } \n</code></pre>"},{"location":"notes_de_cours/Semaine_1/#visual-studio-et-la-compilation","title":"Visual studio et la compilation","text":"<p>Lorsque visual studion fait la compilation de votre programme, soit par l'ex\u00e9cution, soit simplement par la g\u00e9n\u00e9ration (menu g\u00e9n\u00e9rer) le code est converti en langage interm\u00e9diaire (Intermediate language \"il\")  </p> <p>G\u00e9n\u00e9ralement, depuis programmation 1, vous compilez en mode debug.  </p> <p>Se faisant votre programme sera compil\u00e9 et assembl\u00e9 dans le dossier de votre solution sous [dossier de solution]/[dossier de Projet]/bin/debug/  </p> <p></p>"},{"location":"notes_de_cours/Semaine_1/#execution-dune-application-console-via-linvite-de-commande","title":"Ex\u00e9cution d'une application console via l'invite de commande","text":"<p>On peut d\u00e9marrer l'application en cliquant dessus, mais \u00e9galement en lancant l'ex\u00e9cutable via l'invite de commande.  </p> <p>Pour le pr\u00e9sent exemple j'ai utilis\u00e9 \"git bash\". J'aurais pu utiliser powershell ou encore l'invite de commande standard.</p> <p></p>"},{"location":"notes_de_cours/Semaine_1/#public-static-void-mainstring-args","title":"public static void Main(string[] args) ?","text":"Main<pre><code>   public static void Main(string[] args)\n   {\n      // afficher chacun des param\u00e8tres \u00e0 l'\u00e9cran\n      foreach(string parametre in args)\n      {\n         Console.WriteLine(parametre);\n      }\n   } \n</code></pre> <p>** notez les choses suivante : **  </p> <ul> <li>Rien de particulier pour param\u00e8tre 1 et 2</li> <li>Le param\u00e8tre 3 a \u00e9t\u00e9 coup\u00e9 en deux \u00e0 cause de l'espace</li> <li>Le param\u00e8tre 4 est correct puisqu'il est entre guillemets.</li> </ul> <p></p>"},{"location":"notes_de_cours/Semaine_1/#deboguage-avec-visual-studio-et-les-parametres","title":"D\u00e9boguage avec visual studio et les param\u00e8tres.","text":"<p>On peut lancer l'application dans visual studio en simulant que des param\u00e8tres ont \u00e9t\u00e9 ins\u00e9r\u00e9s dans l'invite de commande. pour se faire, on doit aller dans le menu D\u00e9boguer -&gt; Propri\u00e9t\u00e9s de d\u00e9boguage de [projet] -&gt; Arguments de la ligne de commande.  </p> <p> Ou encore dans le menu de d\u00e9boggage. Par les propri\u00e9t\u00e9s du projet.  Les deux sont \u00e9quivalents. </p>"},{"location":"notes_de_cours/Semaine_1/#exercice-de-revision-p1-p2-utilisation-de-lia-ou-des-travaux-de-p1-interdit","title":"Exercice de r\u00e9vision p1 + p2 (Utilisation de l'ia ou des travaux de P1 interdit)","text":"<ol> <li>Faites vous un r\u00e9pertoire git avec un .gitignore pour c#. Je vous sugg\u00e8re  celui-ci 0.0 Faites vous un dossier pour travailler. 0.1 Lancez git bash dans le dossier et lancez -&gt; git init 0.2 Copiez votre fichier .gitignore dans le dossier 0.3 Faites git add .  0.4 Faites git commit -m \"Premier commit\" 0.5 Ensuite lancez votre visual studio dans le dossier git.  </li> </ol> <p>R\u00e8gles pour vos commit. 1 commit par fonctionnalit\u00e9 termin\u00e9e et test\u00e9e.</p> <ol> <li> <p>Faites une m\u00e9thode Afficher() qui prend en param\u00e8tre un tableau d'entiers et qui l'affiche \u00e0 l'\u00e9cran. Faites le summary associ\u00e9.  </p> </li> <li> <p>Faites une m\u00e9thode qui s'appelle Interchanger qui prends en param\u00e8tre un tableau d'entier et 2 nombre entiers. Les 2 nombres pass\u00e9s en param\u00e8tres sont les 2 index qui doivent \u00eatre interchang\u00e9.</p> </li> </ol> <p>Exemple Interchanger(monTableau, index1, index2);  </p> <p>Consid\u00e9rant le tableau suivant :  { 10, 20, 30, 40, 50 } Consid\u00e9rant les index 0 et 3 L'invocation de Interchanger(leTableau, 0, 3) interchange les valeurs \u00e0 l'index 0 et 3 soit :  </p> <p>{ 40, 20, 30, 10, 50 }  </p> <p>Vous avez vu les trois tris suivants: - Tri \u00e0 bulle - Tri selection   - Tri insertion  </p> <p>R\u00e9f\u00e9rence : Visualgo</p> <p>Codez 3 m\u00e9thodes avec leurs noms respectifs. Pouvant tri\u00e9 Avec les summarys tels que demand\u00e9s.  </p> <ol> <li>Faites la codification de du Main de fa\u00e7on \u00e0 ce que : 3.1 S'il n'y a aucun param\u00e8tres ou si les param\u00e8tres sont invalides, l'application se ferme en disant \"Param\u00e8tre invalide : la syntaxe doit \u00eatre....\" 3.2 l'application doit avoir comme premier parametres \"bulle\", \"insertion\" ou \"selection\" 3.3 l'application doit avoir en dernier parametres une s\u00e9rie d'entiers \u00e0 trier. 3.4 l'application doit utiliser Interchanger  </li> </ol> <p>Exemple : Trier.exe bulle 5 5 7 8 9 4 5 3 3 10 Doit afficher :  </p> <p> R\u00e9sultat Tri bulle : 3 3 4 5 5 5 7 8 9 10</p> <p>Exemple : Trier.exe bubulle 5 5 7 8 9 4 5 3 3 10 ou Trier.exe bubulle 5 5 7 8 Roger 4 5 3 3 10  </p> <p>Doit afficher :  </p> <p> R\u00e9sultat Param\u00e8tres invalide : la syntaxe doit \u00eatre Trier.exe [ bulle | insertion | selection ] {nombres...}</p>"},{"location":"notes_de_cours/Semaine_10_interface_et_composants/","title":"Cycle de vie d\u2019un Formulaire Windows Forms en C","text":"<p>Ce document r\u00e9sume les \u00e9tapes cl\u00e9s du cycle de vie d\u2019un <code>Form</code> dans une application Windows Forms, du constructeur \u00e0 la fermeture.</p>"},{"location":"notes_de_cours/Semaine_10_interface_et_composants/#ordre-des-evenements-principaux","title":"\ud83d\udd04 Ordre des \u00e9v\u00e9nements principaux","text":"<ol> <li> <p>Constructeur</p> <ul> <li>Appel\u00e9 lors de la cr\u00e9ation de l\u2019objet.</li> <li>Initialise les composants.    <pre><code>public Form1()\n{\n    InitializeComponent();\n}\n</code></pre></li> </ul> </li> <li> <p>HandleCreated (optionnel, rarement utilis\u00e9)</p> <ul> <li>D\u00e9clench\u00e9 lorsque le handle Windows du formulaire est cr\u00e9\u00e9.</li> </ul> </li> <li> <p>Load</p> <ul> <li>D\u00e9clench\u00e9 juste avant que le formulaire soit affich\u00e9.</li> <li>Id\u00e9al pour charger des donn\u00e9es ou initialiser l\u2019interface.    <pre><code>private void Form1_Load(object sender, EventArgs e) { }\n</code></pre></li> </ul> </li> <li> <p>Shown</p> <ul> <li>D\u00e9clench\u00e9 une seule fois, lorsque le formulaire devient visible.</li> <li>Utile pour lancer des actions post-affichage.    <pre><code>private void Form1_Shown(object sender, EventArgs e) { }\n</code></pre></li> </ul> </li> <li> <p>[Phase d\u2019interaction]</p> <ul> <li>\u00c9v\u00e9nements utilisateur : clics, saisies, navigation, etc.</li> </ul> </li> <li> <p>Closing</p> <ul> <li>D\u00e9clench\u00e9 juste avant la fermeture.</li> <li>Permet d\u2019annuler la fermeture (<code>e.Cancel = true</code>).    <pre><code>private void Form1_Closing(object sender, CancelEventArgs e) { }\n</code></pre></li> </ul> </li> <li> <p>FormClosed</p> <ul> <li>D\u00e9clench\u00e9 une fois le formulaire ferm\u00e9.</li> <li>Id\u00e9al pour les nettoyages finaux ou sauvegardes.    <pre><code>private void Form1_FormClosed(object sender, FormClosedEventArgs e) { }\n</code></pre></li> </ul> </li> </ol>"},{"location":"notes_de_cours/Semaine_10_interface_et_composants/#resume-visuel","title":"\ud83e\udded R\u00e9sum\u00e9 visuel","text":"<pre><code>Constructeur\n   \u2193\nInitializeComponent()\n   \u2193\nHandleCreated (optionnel)\n   \u2193\nLoad\n   \u2193\nShown\n   \u2193\n[Utilisation du formulaire]\n   \u2193\nClosing\n   \u2193\nFormClosed\n</code></pre>"},{"location":"notes_de_cours/Semaine_10_interface_et_composants/#tldr","title":"\u2705 TLDR","text":"<ul> <li><code>Load</code> : pr\u00e9paration avant l'affichage.</li> <li><code>Shown</code> : action une fois le formulaire visible.</li> <li><code>Closing</code> : pour intercepter la fermeture.</li> <li><code>FormClosed</code> : pour terminer proprement.</li> </ul>"},{"location":"notes_de_cours/Semaine_10_interface_et_composants/#liaison-dune-list-a-un-combobox-dans-windows-forms","title":"Liaison d'une List \u00e0 un ComboBox dans Windows Forms <p>Ce document explique comment, \u00e0 partir du contr\u00f4leur, r\u00e9cup\u00e9rer une liste de clients (<code>List&lt;Client&gt;</code>) et l'assigner \u00e0 un <code>ComboBox</code> dans un formulaire Windows Forms.</p>","text":""},{"location":"notes_de_cours/Semaine_10_interface_et_composants/#1-classe-client-de-base","title":"1. Classe <code>Client</code> de base","text":"<p>Voici un exemple simple de classe <code>Client</code> :</p> <pre><code>public class Client\n{\n    public string Nom { get; set; }\n\n    public override string ToString()\n    {\n        return Nom;\n    }\n}\n</code></pre>"},{"location":"notes_de_cours/Semaine_10_interface_et_composants/#2-recuperation-de-la-liste-depuis-le-controleur","title":"2. R\u00e9cup\u00e9ration de la liste depuis le contr\u00f4leur","text":"<p>On suppose que le contr\u00f4leur a une m\u00e9thode comme :</p> <pre><code>public List&lt;Client&gt; RecupererListeClient()\n{\n    return new List&lt;Client&gt;\n    {\n        new Client { Nom = \"Alice\" },\n        new Client { Nom = \"Bob\" }\n    };\n}\n</code></pre>"},{"location":"notes_de_cours/Semaine_10_interface_et_composants/#3-liaison-au-combobox-comboboxclient","title":"3. Liaison au ComboBox (<code>comboBoxClient</code>)","text":"<p>Dans le formulaire, on peut lier la liste \u00e0 un <code>ComboBox</code> :</p> <pre><code>private void ChargerClientsDansComboBox()\n{\n    List&lt;Client&gt; listeClients = _controlleurClient.RecupererListeClient();\n    comboBoxClient.DataSource = listeClients;\n    comboBoxClient.DisplayMember = \"Nom\"; // Propri\u00e9t\u00e9 \u00e0 afficher\n}\n</code></pre>"},{"location":"notes_de_cours/Semaine_10_interface_et_composants/#4-appel-dans-form_load","title":"4. Appel dans <code>Form_Load</code>","text":"<p>Pour remplir le <code>ComboBox</code> au chargement du formulaire :</p> <pre><code>private void FormClient_Load(object sender, EventArgs e)\n{\n    ChargerClientsDansComboBox();\n}\n</code></pre>"},{"location":"notes_de_cours/Semaine_10_interface_et_composants/#tldr_1","title":"TLDR","text":"<ul> <li>Le <code>ComboBox</code> affiche la propri\u00e9t\u00e9 <code>Nom</code> des objets <code>Client</code>.</li> <li>La source de donn\u00e9es est la liste retourn\u00e9e par le contr\u00f4leur.</li> <li>Il suffit de d\u00e9finir <code>DisplayMember</code> pour contr\u00f4ler l'affichage.</li> </ul>"},{"location":"notes_de_cours/Semaine_2/","title":"Cr\u00e9ation d'une solution multi-projets","text":"<p>G\u00e9n\u00e9ralement, une solution est compos\u00e9e de plusieurs projets. La raison est qu'on ne m\u00e9lange pas les projets qui font l'interaction avec l'utilisateur avec les projets qui sont la logique, le domaine, de l'application.</p> <p>G\u00e9n\u00e9ralement on retrouve 3 types de projets. - Les projet(s) d'interface avec l'utilisateur -&gt; Console / Graphique - Les projets de biblioth\u00e8que de classe - Les projets de tests unitaires  </p> <p>Pour bien saisir les 3 types de projet, r\u00e9capitulons les indices.</p> <ul> <li>\"Ne faites pas de Console.WriteLine partout !\"</li> </ul> <p>Effectivement, on veut s\u00e9parer la logique applicative de la logique d'affichage.  </p> <p>Prenons par exemple les tris que vous avez fait. Un tableau en d\u00e9sordre en entr\u00e9, un tableau en ordre en sortie. Il est nullement n\u00e9cessaire d'en faire l'affichage.</p> <p>Faisons notre premier projet qui contient les 3 projets n\u00e9cessaires \u00e0 faire un bon  d\u00e9veloppement.   </p> <p>Avant toute chose, r\u00e9visez l'onglet installation pour vous assurer que vous avez .NET 8 et .NET 9. </p> <p> </p>"},{"location":"notes_de_cours/Semaine_2/#_1","title":"Cr\u00e9ation du projet","text":"Program.cs<pre><code>// En entete de fichier on doit maintenant faire le bon using\n\nusing MaBibliotheque-9999999; // le namespace dans lequel la ou les classe(s) se retrouvent.\n</code></pre>"},{"location":"notes_de_cours/Semaine_2_importation/","title":"Solution \u00e0 plusieurs projets","text":""},{"location":"notes_de_cours/Semaine_2_importation/#importation-de-projet-dans-une-solution","title":"Importation de projet dans une solution","text":"<p>(Version \u062d\u0645\u064a\u0631)  </p>"},{"location":"notes_de_cours/Semaine_2_importation/#ajouter-le-dossier-du-projet-dans-le-dossier-de-solution","title":"Ajouter le dossier du projet dans le dossier de solution","text":""},{"location":"notes_de_cours/Semaine_2_importation/#ajouter-le-projet-a-la-solution","title":"Ajouter le projet \u00e0 la solution","text":""},{"location":"notes_de_cours/Semaine_2_importation/#ajouter-la-dependence-entre-les-projets","title":"Ajouter la d\u00e9pendence entre les projets","text":""},{"location":"notes_de_cours/Semaine_2_importation/#ajouter-le-using-pour-utiliser-les-classes-dans-lautre-espace-de-nom","title":"Ajouter le \"using\" pour utiliser les classes dans l'autre espace de nom","text":""},{"location":"notes_de_cours/Semaine_3/","title":"Semaine 3 - Debug.WriteLine","text":""},{"location":"notes_de_cours/Semaine_3/#utilisation-de-debugwriteline","title":"Utilisation de Debug.WriteLine","text":"<ul> <li>Activer la fen\u00eatre de sortie  </li> </ul> <ul> <li>Je vous recommande de la mettre avec vos espions</li> <li>Toutes les fen\u00eatres d'aide \u00e0 l'ex\u00e9cution sont disponibles dans le menu D\u00e9boggage -&gt; Fen\u00eatres. </li> </ul>"},{"location":"notes_de_cours/Semaine_3_1/","title":"Semaine 3.1 - Passage par valeur ou r\u00e9f\u00e9rence","text":"<p>Passage par copie ou par r\u00e9f\u00e9rence ?</p>"},{"location":"notes_de_cours/Semaine_3_1/#passage-par-copie","title":"Passage par copie","text":"<p>En programmation, vous passez g\u00e9n\u00e9ralement vos variables \u00e0 une m\u00e9thode par copie.</p> <p>Comme vu en classe, l'appel d'une m\u00e9thode avec un param\u00e8tre de type int ne modifie pas la valeur de la variable dans la m\u00e9thode Main(), et ce, m\u00eame si les variables ont le m\u00eame nom. <pre><code>public static void Main(string[] args)\n{\n   int a = 0;\n   M(a);\n   Console.WriteLine(a); // Ici, 'a' reste \u00e0 0.\n}\n\npublic static void M(int a)\n{\n   a = 8;\n}\n</code></pre> La raison de ce comportement est que M() re\u00e7oit une copie de la valeur de a dans le programme principal.</p> <p>Cependant, cela devient un peu plus complexe lorsque vous travaillez avec des tableaux ou des objets. <pre><code>public static void Main(string[] args)\n{\n   int[] a = {0, 1, 2, 3};\n   M(a);\n   Console.WriteLine(a[0]); // Ici, 'a[0]' sera 8.\n}\n\npublic static void M(int[] a)\n{\n   a[0] = 8;\n}\n</code></pre> Dans cet exemple, ce que re\u00e7oit M() n'est pas une copie de la valeur de a, mais une copie de la r\u00e9f\u00e9rence. Cela signifie que la variable a dans Main() et la variable a dans M() font r\u00e9f\u00e9rence \u00e0 la m\u00eame zone m\u00e9moire. Par cons\u00e9quent, lorsque a[0] est modifi\u00e9 dans M(), le tableau original dans Main() est directement affect\u00e9.</p> <p>Voici un autre exemple pour illustrer le fait qu'il s'agit bien d'une copie de la r\u00e9f\u00e9rence, et non de la valeur : <pre><code>public static void Main(string[] args)\n{\n   int[] a = {0, 1, 2, 3};\n   M(a);\n   Console.WriteLine(a[0]); // Ici, 'a[0]' restera 0.\n}\n\npublic static void M(int[] a)\n{\n   a = new int[10];  // 'a' est maintenant une nouvelle r\u00e9f\u00e9rence en m\u00e9moire.\n   a[0] = 10;  // Modifie uniquement ce nouveau tableau.\n}\n</code></pre> Dans cet exemple, la variable a dans Main() ne sera pas modifi\u00e9e. En effet, l'instruction new int[10] cr\u00e9e un nouveau tableau en m\u00e9moire, qui est r\u00e9f\u00e9renc\u00e9 par a dans M(). Cette nouvelle r\u00e9f\u00e9rence n'affecte pas la variable a dans Main(). Passage par r\u00e9f\u00e9rence</p>"},{"location":"notes_de_cours/Semaine_3_1/#passage-par-reference-avec-le-mot-ref","title":"Passage par r\u00e9f\u00e9rence avec le mot ref.","text":"<p>Il est \u00e9galement possible de demander \u00e0 une m\u00e9thode de modifier directement le contenu d'une variable, \u00e0 l'endroit m\u00eame o\u00f9 elle est stock\u00e9e en m\u00e9moire. Pour ce faire, il faut sp\u00e9cifier que la variable doit \u00eatre pass\u00e9e par r\u00e9f\u00e9rence.</p> <p>Le mot-cl\u00e9 ref permet de passer une variable par r\u00e9f\u00e9rence. <pre><code>public static void Main(string[] args)\n{\n   int a = 3;\n   M(ref a); // L'appel se fait avec 'ref'\n   Console.WriteLine(a); // Ici, 'a' sera 5.\n}\n\npublic static void M(ref int a) // La d\u00e9claration de 'a' se fait \u00e9galement avec 'ref'\n{\n   a = 5;  // 'a' est modifi\u00e9 directement dans la m\u00e9thode Main.\n}\n</code></pre> Dans cet exemple, la m\u00e9thode M re\u00e7oit la r\u00e9f\u00e9rence en m\u00e9moire de a. Cela permet \u00e0 M() de manipuler directement la valeur de a, et les modifications sont visibles dans la m\u00e9thode Main(). Le mot-cl\u00e9 out</p> <p>En C#, il existe \u00e9galement une autre fa\u00e7on de passer une variable par r\u00e9f\u00e9rence avec le mot-cl\u00e9 out.</p> <p>Les mots-cl\u00e9s ref et out remplissent un r\u00f4le similaire, c'est-\u00e0-dire passer une variable par r\u00e9f\u00e9rence. La diff\u00e9rence majeure r\u00e9side dans le fait que ref n\u00e9cessite que la variable soit initialis\u00e9e avant l'appel de la m\u00e9thode, tandis que out permet d'initialiser la variable directement dans la m\u00e9thode appel\u00e9e.</p> <p>Cela vous rappelle-t-il quelque chose ?</p>"},{"location":"notes_de_cours/Semaine_3_1/#passage-par-reference-avec-le-mot-cle-out","title":"Passage par r\u00e9f\u00e9rence avec le mot cl\u00e9 out","text":"<p>Voici un exemple utilisant out avec Int.TryParse : <pre><code>public static void Main(string[] args)\n{\n   int a;  // Non initialis\u00e9e\n   bool test = Int.TryParse(\"42\", **out** a);  // 'a' sera initialis\u00e9e ici.\n   Console.WriteLine(a);  // Affichera 42.\n}\n</code></pre> Notez que la variable a doit \u00eatre initialis\u00e9e \u00e0 l'int\u00e9rieur de la m\u00e9thode lorsque vous utilisez out.</p> <p>De m\u00eame, cela peut \u00eatre appliqu\u00e9 aux tableaux et autres objets : <pre><code>public static void Main(string[] args)\n{\n   int[] a;  // Non initialis\u00e9\n   M(out a);  // 'a' sera initialis\u00e9 dans M().\n}\n\nprivate static void M(out int[] a)\n{\n   a = new int[] {1, 2, 3};  // Initialisation de 'a' dans M().\n}\n</code></pre></p> <p>En revanche, essayer de faire la m\u00eame chose avec ref provoquera une erreur de compilation, car ref exige que la variable soit d\u00e9j\u00e0 initialis\u00e9e avant d'\u00eatre pass\u00e9e \u00e0 la m\u00e9thode.  </p> <p> </p> <p>R\u00e9sum\u00e9</p> <pre><code>- Passage par copie : La m\u00e9thode re\u00e7oit une copie de la valeur de la variable.  \n  Si la variable est un tableau ou un objet, la r\u00e9f\u00e9rence \u00e0 cette m\u00e9moire est copi\u00e9e,  \n  ce qui permet de modifier les donn\u00e9es, mais pas la r\u00e9f\u00e9rence elle-m\u00eame.\n\n- Passage par r\u00e9f\u00e9rence avec **ref** : Permet de modifier directement la variable  \n  dans la m\u00e9thode appelante. La variable est initialis\u00e9e avant l'appel.\n\n- Passage par r\u00e9f\u00e9rence avec **out** : Similaire \u00e0 ref, mais la variable est  \n  initialis\u00e9e dans la m\u00e9thode appel\u00e9e. Vous ne pouvez pas l'utiliser sans l'initialiser dans la m\u00e9thode.\n</code></pre>"},{"location":"notes_de_cours/Semaine_4-ClassesEtTest/","title":"Semaine 4-5-6 - Classes et tests - r\u00e9capitulation","text":""},{"location":"notes_de_cours/Semaine_4-ClassesEtTest/#creation-dune-classe-dans-une-bibliotheque-et-tests-unitaires","title":"Cr\u00e9ation d'une classe dans une biblioth\u00e8que et tests unitaires","text":"<ul> <li>Cr\u00e9er une biblioth\u00e8que de classes vous fabrique par d\u00e9faut Class1 que vous allez devoir renommer.</li> <li> <p>(Ctrl+r Ctrl+r) </p> </li> <li> <p>Renomme \u00e9galement le fichier associ\u00e9 \u00e0 la classe. </p> </li> </ul>"},{"location":"notes_de_cours/Semaine_4-ClassesEtTest/#creation-des-champs-attributs","title":"Cr\u00e9ation des champs / attributs","text":"<ul> <li>Faire la d\u00e9claration des variables membres.</li> <li>Attention : Toujours \"private\" toujours \"_\" et le nom en casse chameau. </li> </ul>"},{"location":"notes_de_cours/Semaine_4-ClassesEtTest/#accesseurs","title":"Accesseurs","text":"<ul> <li> <p>Cr\u00e9ation des accesseur avec les actions rapides. </p> </li> <li> <p>Prendre l'option d'encapsuler et d'utiliser la propri\u00e9t\u00e9. </p> </li> <li> <p>Faire un premier nettoyage des \"get\" et des \"set\" pour rendre \u00e7a plus propre.  </p> </li> <li>Les \"get\" peuvent rester sur une seule ligne. </li> </ul>"},{"location":"notes_de_cours/Semaine_4-ClassesEtTest/#validation-des-valeurs-passees-dans-les-proprietes","title":"Validation des valeurs pass\u00e9es dans les propri\u00e9t\u00e9s","text":"<ul> <li>Les sections summarys sont essentiels  </li> <li>Dans les \"set\" on s'assure de valider le param\u00e8tre.</li> <li>Attention: Le param\u00e8tre prend le nom de \"value\". Typique \u00e0 C# </li> </ul>"},{"location":"notes_de_cours/Semaine_4-ClassesEtTest/#validation-par-regex-et-foreach","title":"Validation par regex et foreach","text":"<ul> <li>Exemple d'une validation sanitaire pour le num\u00e9ro de DA</li> <li>Par regex et par boucle foreach. </li> </ul>"},{"location":"notes_de_cours/Semaine_4-ClassesEtTest/#valeurs-nullable","title":"Valeurs nullable","text":"<ul> <li>Pour les avertissement et les erreurs concernant les type \"non-nullable\"</li> <li>Placer un ? apr\u00e8s le type pour rendre la valeur nullable. </li> </ul>"},{"location":"notes_de_cours/Semaine_4-ClassesEtTest/#generation-du-ou-des-constructeurs","title":"G\u00e9n\u00e9ration du ou des constructeurs","text":"<ul> <li>Une fois toutes les validations sanitaires compl\u00e9t\u00e9es, proc\u00e9dez \u00e0 la cr\u00e9ation des constructeurs</li> <li> <p>Action rapides et factorisation sur la classe. </p> </li> <li> <p>S\u00e9lectionner \"G\u00e9n\u00e9rer le constructeur\" </p> </li> <li> <p>S\u00e9lectionnez les propri\u00e9t\u00e9s et non les champs. </p> </li> <li> <p>Assurez vous de bien remplir la section summary </p> </li> <li>Attention les exceptions ne seront pas g\u00e9n\u00e9r\u00e9es, vous devez compl\u00e9ter cette section manuellement. </li> </ul>"},{"location":"notes_de_cours/Semaine_4-ClassesEtTest/#creation-des-tests-unitaires","title":"Cr\u00e9ation des tests unitaires","text":"<ul> <li>Sur la classe on ouvre les actions rapides et les refactorisations  </li> <li> <p>S\u00e9lectionner \"Cr\u00e9er des tests unitaires\" </p> </li> <li> <p>Si aucun projet de tests, on garde les options par d\u00e9faut. </p> </li> <li> <p>Faire la section summary de la classe.</p> </li> <li>On peut se faire des variables pour se faciliter la vie. </li> <li>Pour chaque m\u00e9thode / constructeur, on fait l'analyse des points de retour (throw new, return valeur);</li> <li>On fait une m\u00e9thode de test pour chacun des points de retour (pour le moment)</li> <li>Dans l'exemple on test avec un [ExpectedException] en ent\u00eate de m\u00e9thode. </li> <li> <p>La cr\u00e9ation de l'\u00e9tudiant se fait avec les variables d\u00e9finie en ent\u00eate de classe, beaucoup plus lisible, beaucoup plus rapide  </p> </li> <li> <p>Exemple de test d'exception fait avec un Assert.ThrowsException. Je vous sugg\u00e8re de casser la ligne sur plusieurs lignes.   Beaucoup plus facile \u00e0 lire.  </p> </li> </ul> <p>\"J'affirme que sera lanc\u00e9e l'exception \"ArgumentException\",    quand sera ex\u00e9cut\u00e9e l'instruction \"new \u00e9tudiant(...)\"    faute de quoi le message d'erreur sera \"L'ArgumentException non lanc\u00e9 sur construction avec nom == string.Empty\" </p> <ul> <li>Test valide, confirme, via ce qui est disponible, que l'\u00e9tudiant est bien cr\u00e9\u00e9. </li> </ul>"},{"location":"notes_de_cours/Semaine_7-Interface/","title":"Semaine 7 Les interfaces","text":""},{"location":"notes_de_cours/Semaine_7-Interface/#les-interfaces","title":"Les interfaces","text":"<p>Les interfaces sont essentiellement des contrats pour s'assurer qu'une classe impl\u00e9mente une ou plusieurs m\u00e9thodes / accesseurs.  </p> <p>Le standard au niveau du nom des interface est \"I majuscule\" suivit du nom de l'interface, qui commence \u00e9galement par une lettre majuscule. Exemple : \"IEquatable\" ou \"ICompatable\"  </p>"},{"location":"notes_de_cours/Semaine_7-Interface/#exemple-de-declaration","title":"Exemple de d\u00e9claration","text":"IUneInterface.cs<pre><code>public interface IUneInterface\n{  \n\n}\n</code></pre>"},{"location":"notes_de_cours/Semaine_7-Interface/#declaration-du-contrat","title":"D\u00e9claration du \"contrat\"","text":"<p>Dans l'interface on d\u00e9clare uniquement les signatures de m\u00e9thodes. Bref, on termine pas un point-virgule \u00e0 la fin de la d\u00e9claration. IUneInterface.cs<pre><code>public interface IUneInterface\n{  \n    public void Methode();\n    public int Methode(int variable);\n}\n</code></pre></p>"},{"location":"notes_de_cours/Semaine_7-Interface/#les-interfaces-standards-de-c","title":"Les interfaces \"standards\" de C","text":"<p>Dans c# il y a moulte interfaces d\u00e9j\u00e0 toutes pr\u00eates, dont deux tr\u00e8s connues - IEquatable - IComparable</p>"},{"location":"notes_de_cours/Semaine_7-Interface/#iequatable","title":"IEquatable","text":"<p>Permet de savoir si deux objets sont identiques (pareil) en fonction des donn\u00e9es de l'objet et non parce que les 2 objets sont identiques au niveau de la m\u00e9moire (c'est la m\u00eame r\u00e9f\u00e9rence).</p> <p>G\u00e9n\u00e9ralement on utiise IEquatable avec la m\u00e9canique g\u00e9n\u00e9rique</p> IUneInterface.cs<pre><code>public class UneClasse : IEquatable&lt;UneClasse&gt; //d\u00e9clare que la classe UneClasse va avoir Equals(UneClasse other)\n{  \n    public bool Equals(UneClasse other)\n    {\n\n    }\n}\n</code></pre>"},{"location":"notes_de_cours/Semaine_7-Interface/#les-grand-principe-de-iequatable","title":"Les grand principe de IEquatable.","text":"<ul> <li>Si other est null, nous sommes diff\u00e9rents -&gt; retourne faux</li> <li>Ensuite on compare les objets sur les r\u00e8gles m\u00e9tiers. Exemple est-ce que les noms sont identiques, est-ce que le kilom\u00e9trage est identique, etc.</li> </ul> UneClasse.cs<pre><code>Exemple :   \npublic class UneClasse : IEquatable&lt;UneClasse&gt; //d\u00e9clare que la classe UneClasse va avoir Equals(UneClasse other)\n{  \n    private int _uneValeur = 8;\n\n    public bool Equals(UneClasse other)\n    {\n       if (other is null)\n          return false;\n\n       return (_uneValeur == other._uneValeur);\n\n    }\n}\n</code></pre> <p>Autre exemple : </p> Personne.cs<pre><code>public class Personne : IEquatable&lt;Personne&gt;\n{\n    public string Nom { get; set; }\n\n    public bool Equals(Personne other)\n    {\n        if (other is null) return false;\n        return this.Nom == other.Nom;\n    }\n}\n</code></pre> <p>R\u00e9f\u00e9rence microsoft </p>"},{"location":"notes_de_cours/Semaine_7-Interface/#icomparable","title":"IComparable","text":"<p>IComparable permet de comparer des objets entre eux, mais \u00e9galement de les ordonner. Par exemple on compare 2 \u00e2ges entre eux. 20 et 25 ans, on peut d\u00e9duire qu'il y a une diff\u00e9rence de 5 entre les deux.  </p> <p>D\u00e9tails important de vision. Si on regarde \u00e0 l'inverse on voit qu'il peut aussi avoir une diff\u00e9rence de -5 entre les deux \u00e2ges.</p> <p>Si on a 25 et 25 on a une diff\u00e9rence de 0, donc les \u00e2ges sont identiques.</p> <p>Dans l'impl\u00e9mentation, les lignes directrice. Si on compare avec un objet null on retourne 1. Signifiant que nous sommes plus grand que \"other\".</p> <p>Autrement c'est toujours \"nous\" compar\u00e9 \u00e0 l'autre. Si nous somme plus grand, le nombre est positif. Autrement, z\u00e9ro si nous sommes \u00e9gaux, sinon un nombre n\u00e9gatif. Souvent, une soustraction est impliqu\u00e9e.  </p> <p>Exemple : une personne de 25 ans et de 20 ans... 25 - 20 = 5 donc nous sommes plus grand. Inversement, si la personne \u00e0 20 ans et que other a 25... 20 - 25 = -5 donc moins \u00e2g\u00e9e.</p> <p>En code : </p> Etudiant.cs<pre><code>   public class Etudiant : IComparable&lt;\u00c9tudiant&gt;\n{\n    public string Nom { get; set; }\n    public double Moyenne { get; set; }\n\n    public int CompareTo(\u00c9tudiant other)\n    {\n        if (other == null) return 1;\n\n        return this.Moyenne - other.Moyenne;\n    }\n} \n</code></pre> <p>\u00c0 noter qu'une impl\u00e9mentation d'interface n'est pas exclusive, une classe peut impl\u00e9menter plusieurs interfaces.</p> <p>Exemple :</p> Etudiant.cs<pre><code>public class Personne : IEquatable&lt;Personne&gt;, IComparable&lt;Personne&gt;\n{\n    public string Nom { get; set; }\n    public int \u00c2ge { get; set; }\n\n    // Impl\u00e9mentation de IEquatable&lt;Personne&gt;\n    public bool Equals(Personne other)\n    {\n        if (other is null) return false;\n        return Nom == other.Nom &amp;&amp; \u00c2ge == other.\u00c2ge;\n    }\n\n    // override de Equals de object -&gt; on fait la passe sur la palette de Equals qui re\u00e7oit une personne en param\u00e8tre.\n    public override bool Equals(object obj) =&gt; Equals(obj as Personne);\n\n    // m\u00e9thode qui retourne un nombre \"unique\" pour identifier l'objet (requis par CompareTo)\n    public override int GetHashCode() =&gt; HashCode.Combine(Nom, Age);\n\n    // Impl\u00e9mentation de IComparable&lt;Personne&gt;\n    public int CompareTo(Personne other)\n    {\n        if (other == null) return 1;\n\n        // Exemple : tri par \u00e2ge croissant, puis par nom\n        int comparaison\u00c2ge = Age.CompareTo(other.Age);\n        if (comparaison\u00c2ge != 0) return comparaison\u00c2ge;\n\n        return string.Compare(Nom, other.Nom, StringComparison.Ordinal); // une m\u00e9thode de comparaison.\n    }\n\n    public override string ToString() =&gt; $\"{Nom} ({Age} ans)\";\n}\n</code></pre> <p>Note sur le \"Ordinal\"</p> <p>StringComparison.Ordinal effectue une comparaison binaire stricte des caract\u00e8res, bas\u00e9e uniquement sur leurs valeurs Unicode. </p>"},{"location":"notes_de_cours/Semaine_7-Interface/#pourquoi-utiliser-stringcomparisonordinal","title":"Pourquoi utiliser <code>StringComparison.Ordinal</code> ?","text":"Crit\u00e8re <code>StringComparison.Ordinal</code> Autres comparaisons (<code>CurrentCulture</code>, etc.) Vitesse \u2705 Tr\u00e8s rapide (pas de traitement culturel) \u274c Plus lent (d\u00e9pend de la culture de l'environnement) Pr\u00e9dictibilit\u00e9 \u2705 Identique sur toutes les machines \u274c Peut varier selon la langue ou le syst\u00e8me Sensibilit\u00e9 \u00e0 la casse \u2705 Oui (ex. <code>\"abc\"</code> \u2260 <code>\"ABC\"</code>) \u26a0\ufe0f D\u00e9pend de l'option (IgnoreCase) Tri technique \u2705 Id\u00e9al pour tris binaires, noms techniques, cl\u00e9s de dictionnaire \u274c Peut donner des r\u00e9sultats inattendus (ex. tri alphab\u00e9tique fran\u00e7ais) Ind\u00e9pendant de la culture \u2705 Oui \u274c Non Utilisation recommand\u00e9e Comparaison de cha\u00eenes techniques : identifiants, fichiers, etc. Affichage utilisateur, recherche en texte selon la langue"},{"location":"notes_de_cours/Semaine_8-singleton/","title":"Patron de conception : Singleton en C","text":""},{"location":"notes_de_cours/Semaine_8-singleton/#definition","title":"D\u00e9finition","text":"<p>Le Singleton est un patron de conception qui garantit qu'une classe ne poss\u00e8de qu'une seule instance, tout en fournissant un point d'acc\u00e8s global \u00e0 cette instance.</p> <p>Il est souvent utilis\u00e9 pour g\u00e9rer des ressources partag\u00e9es comme une connexion \u00e0 une base de donn\u00e9es, un fichier de log, ou une configuration centrale.</p>"},{"location":"notes_de_cours/Semaine_8-singleton/#objectifs","title":"Objectifs","text":"<ul> <li>Emp\u00eacher la cr\u00e9ation multiple d'objets.</li> <li>Fournir un acc\u00e8s global \u00e0 l'instance unique.</li> </ul>"},{"location":"notes_de_cours/Semaine_8-singleton/#implementation-simple-en-c","title":"Impl\u00e9mentation simple en C","text":"<p>Voici une version non thread-safe du Singleton en C# :</p> <pre><code>public class ExempleSingleton\n{\n    private static ExempleSingleton instance;\n\n    // Propri\u00e9t\u00e9 publique d'acc\u00e8s \u00e0 l'instance\n    public static ExempleSingleton Instance\n    {\n        get\n        {\n            if (instance == null)\n            {\n                instance = new ExempleSingleton();\n            }\n            return instance;\n        }\n    }\n\n    // Constructeur priv\u00e9 pour emp\u00eacher l'instanciation externe\n    private ExempleSingleton()\n    {\n        // Initialisation de l'objet\n    }\n\n    // Exemple de m\u00e9thode\n    public void FaireQuelquechose()\n    {\n        Console.WriteLine(\"Singleton actif !\");\n    }\n}\n</code></pre> <p>Autre exemple pour l'accesseur si toutefois vous la croiseriez  </p> <pre><code>// C'est un \"get\" static avec la notion ?? qui veut dire si c'est null fait un new ExempleSingleton\n\npublic static ExempleSingleton Instance =&gt; instance ?? (instance = new ExempleSingleton());\n</code></pre> <pre><code>//D\u00e9compos\u00e9 en plusieurs lignes on retrouverait\n\npublic static ExempleSingleton Instance \n{\n    get \n    { \n        // instance n'est pas null, donc instance = instance. Sinon on fait un nouveau singleton\n        instance = instance ?? new ExempleSingleton(); \n        return instance;\n    }\n}\n</code></pre> <p>Dans l'exemple pr\u00e9c\u00e9dent, il ya redondance, on assigne instance \u00e0 instance... Si l'instance n'est pas null on mets instance \u00e9gal \u00e0 instance... Donc, vous allez souvent voir la version condens\u00e9e.  </p> <pre><code>//D\u00e9compos\u00e9 en plusieurs lignes on retrouverait\n\npublic static ExempleSingleton Instance\n{\n    get\n    {\n        return instance ?? new ExempleSingleton();\n    }\n}\n</code></pre> <p>Mais souvent dans la documentation ou le code de .Net on va voir litt\u00e9ralement la version lambda <pre><code>public static ExempleSingleton Instance =&gt; instance ?? (instance = new ExempleSingleton());\n</code></pre></p>"},{"location":"notes_de_cours/Semaine_9_interface_et_controlleur/","title":"Gestion d'un Client via un Singleton dans un Projet Windows Forms","text":"<p>Ce document explique comment structurer un petit projet Windows Forms en C# pour g\u00e9rer un client simple (ayant uniquement un nom) en utilisant le patron de conception Singleton pour le contr\u00f4leur.</p>"},{"location":"notes_de_cours/Semaine_9_interface_et_controlleur/#1-le-formulaire-formclient","title":"1. Le formulaire (<code>FormClient</code>)","text":"<p>Dans le formulaire principal de l\u2019interface graphique, en haut du constructeur, comme dans une classe normale nous avons une variable priv\u00e9e qui r\u00e9f\u00e9rence le contr\u00f4leur :</p> <pre><code>private ControlleurClient _controlleurClient = ControlleurClient.Instance;\n</code></pre>"},{"location":"notes_de_cours/Semaine_9_interface_et_controlleur/#pourquoi-faire-cela","title":"Pourquoi faire cela ?","text":"<ul> <li>On veut acc\u00e9der \u00e0 une seule instance partag\u00e9e du contr\u00f4leur partout dans l\u2019application.</li> <li>Cela \u00e9vite de devoir instancier manuellement le contr\u00f4leur \u00e0 chaque fois.</li> <li>Cela centralise la logique m\u00e9tier dans une classe d\u00e9di\u00e9e.</li> </ul>"},{"location":"notes_de_cours/Semaine_9_interface_et_controlleur/#2-le-controleur-controlleurclient","title":"2. Le contr\u00f4leur (<code>ControlleurClient</code>)","text":"<p>Le contr\u00f4leur contient toute la logique li\u00e9e aux actions m\u00e9tiers sur les clients (ex. ajouter un nom, r\u00e9cup\u00e9rer une liste).</p> <p>Il est impl\u00e9ment\u00e9 en singleton, c\u2019est-\u00e0-dire que seule une instance de la classe sera cr\u00e9\u00e9e et utilis\u00e9e :</p> <pre><code>public class ControlleurClient\n{\n    private static ControlleurClient instance;\n\n    //version condens\u00e9e du Singleton.\n    public static ControlleurClient Instance =&gt; instance ?? (instance = new ControlleurClient());\n\n    //Constructeur priv\u00e9 pour \u00e9viter l'instanciation.\n    private ControlleurClient() { }\n\n    // Action : Enregistrer un client (par nom)\n    public void EnregistrerClient(string nom)\n    {\n        // Logique d\u2019enregistrement (ex. stocker dans une liste)\n    }\n\n    // Action : R\u00e9cup\u00e9rer la liste des clients\n    public List&lt;string&gt; RecupererListeClient()\n    {\n        //Logique de r\u00e9cup\u00e9ration de la liste\n    }\n}\n</code></pre>"},{"location":"notes_de_cours/Semaine_9_interface_et_controlleur/#3-utilisation-dans-le-formulaire","title":"3. Utilisation dans le formulaire","text":"<p>Voici comment le formulaire utilise le contr\u00f4leur via la variable <code>_controlleurClient</code> pour appeler les actions :</p> <pre><code>private void btnEnregistrer_Click(object sender, EventArgs e)\n{\n    string nomClient = txtNomClient.Text;\n    _controlleurClient.EnregistrerClient(nomClient);\n}\n\nprivate void btnAfficherClients_Click(object sender, EventArgs e)\n{\n    var liste = _controlleurClient.RecupererListeClient();\n    lstClients.DataSource = liste;\n}\n</code></pre>"},{"location":"notes_de_cours/Semaine_9_interface_et_controlleur/#4-resume","title":"4. R\u00e9sum\u00e9","text":"<ul> <li><code>ControlleurClient</code> est un singleton accessible via <code>ControlleurClient.Instance</code>.</li> <li>Le formulaire d\u00e9clare une variable <code>_controlleurClient</code> pour y acc\u00e9der facilement.</li> <li>Les m\u00e9thodes du contr\u00f4leur permettent d\u2019enregistrer un client et de r\u00e9cup\u00e9rer une liste.</li> <li>Le contr\u00f4lleur poss\u00e8de des op\u00e9rations de hauts niveau pour s\u00e9parer la logique d'interface de la logique m\u00e9tier.</li> </ul>"},{"location":"notes_de_cours/section_1.1/","title":"Introduction aux bases de donn\u00e9es relationnelles","text":""},{"location":"notes_de_cours/section_1.1/#pourquoi-utiliser-des-bases-de-donnees","title":"Pourquoi utiliser des bases de donn\u00e9es?","text":"<ul> <li>Organiser de larges quantit\u00e9s de donn\u00e9es</li> <li>S\u00e9lectionner rapidement des informations dans de grands ensembles de donn\u00e9es </li> <li>Stocker de fa\u00e7on persistante des informations</li> </ul> <p>Abr\u00e9viation : BD = Base de donn\u00e9es / DB = Database</p>"},{"location":"notes_de_cours/section_1.1/#architecture-des-bases-de-donnees","title":"Architecture des bases de donn\u00e9es","text":"<p>Mod\u00e8le client-serveur</p> <p>La base de donn\u00e9es est h\u00e9berg\u00e9e sur un serveur auquel l'utilisateur (appel\u00e9 client) se connecte pour effectuer des manipulations. Ce client peut \u00eatre un logiciel client natif ou une application web.</p> <p></p>"},{"location":"notes_de_cours/section_1.1/#systemes-de-gestion-de-base-de-donnees","title":"Syst\u00e8mes de gestion de base de donn\u00e9es","text":"<p>Les syst\u00e8mes de gestion de base de donn\u00e9es (SGBD) sont des logiciels sp\u00e9cialis\u00e9s en gestion de donn\u00e9es.</p> <ul> <li>MySQL (libre \u2014 SQL \u2014 relationnelle)</li> <li>Microsoft SQL Server (propri\u00e9taire - SQL - relationelle)</li> <li>MongoDB (libre \u2014 No SQL)</li> <li>SQLite (libre \u2014 SQL \u2014 relationnelle/embarqu\u00e9e)</li> <li>PostgreSQL (libre \u2014 SQL \u2014 relationnelle)</li> <li>Oracle (propri\u00e9taire \u2014 SQL \u2014 relationnelle)</li> </ul>"},{"location":"notes_de_cours/section_1.1/#pourquoi-utiliser-un-sgbd-plutot-quun-systeme-de-fichier-local","title":"Pourquoi utiliser un SGBD plut\u00f4t qu'un syst\u00e8me de fichier local?","text":"<p>Les SGBD offrent :</p> <ul> <li>Une gestion limitant les redondances de donn\u00e9es</li> <li>Une meilleure organisation de l'information</li> <li>R\u00e8gles d'int\u00e9grit\u00e9 (validation des donn\u00e9es)</li> <li>Contr\u00f4le de la concurrence (explications: https://www.geeksforgeeks.org/concurrency-control-in-dbms/)</li> <li>Fiabilit\u00e9/R\u00e9cup\u00e9ration des donn\u00e9es/Journalisation</li> <li>Ind\u00e9pendance du stockage des donn\u00e9es par rapport \u00e0 l'application</li> </ul>"},{"location":"notes_de_cours/section_1.1/#processus-de-developpement-dune-bd","title":"Processus de d\u00e9veloppement d'une BD","text":"<p>Dans le cours BD1, nous nous int\u00e9resserons principalement \u00e0 l'\u00e9tape de construction.</p>"},{"location":"notes_de_cours/section_1.1/#interagir-avec-une-bd","title":"Interagir avec une BD","text":"<p>Afin d'interagir avec une BD on a besoin minimalement de deux langages :</p> <ul> <li>Un langage de d\u00e9finition des donn\u00e9es (LDD) permettant entre autres de cr\u00e9er et modifier les tables et leur structure.</li> <li>Un langage de manipulation des donn\u00e9es (LMD) permettant entre autres d'ajouter, modifier ou supprimer des lignes dans des tables.</li> </ul> <p>En surplus on peut utiliser un langage de contr\u00f4le de transaction, un de contr\u00f4le des donn\u00e9es, un de gestion des acc\u00e8s et plusieurs autres...</p> <p>Heureusement, le langage de programmation Structured Query Language (Langage de requ\u00eates structur\u00e9es) abr\u00e9g\u00e9 par SQL regroupe tous ces besoins.</p> <p>Le langage SQL (prononc\u00e9 parfois \"SEE-QWEL\" par les anglophones) permet de cr\u00e9er et manipuler des BD ainsi que de g\u00e9rer certains aspects relatifs aux transactions et aux autorisations.</p>"},{"location":"notes_de_cours/section_1.1/#origine-du-langage","title":"Origine du langage","text":"<p>La toute premi\u00e8re version du langage SQL a \u00e9t\u00e9 d\u00e9velopp\u00e9e chez IBM en 1970. En 1979, la compagnie Oracle pr\u00e9senta une version commercialement disponible au grand public. SQL fut rapidement imit\u00e9 et adopt\u00e9 par d'autres fournisseurs.</p> <p>La plupart des langages de programmation imp\u00e9ratifs que vous avez vu (C#, PHP, javascript ...) sont bas\u00e9s sur la th\u00e9orie de l'algorithmie. Mais SQL provient de la th\u00e9orie des ensembles. C'est un langage D\u00c9CLARATIF qui permet de d\u00e9crire le r\u00e9sultat escompt\u00e9, sans d\u00e9crire la mani\u00e8re de l'obtenir. Les SGBD (syst\u00e8mes de gestion de bases de donn\u00e9es) tel que SQL sont \u00e9quip\u00e9s d'optimiseurs de requ\u00eates - des m\u00e9canismes qui d\u00e9terminent automatiquement la mani\u00e8re optimale d'effectuer les op\u00e9rations, notamment par une estimation de la complexit\u00e9 algorithmique. (Source: https://fr.wikipedia.org/wiki/Structured_Query_Language)</p>"},{"location":"notes_de_cours/semaine2_git/","title":"Git","text":""},{"location":"notes_de_cours/semaine2_git/#la-commande-ultime","title":"La commande ultime","text":"Console<pre><code>git status\n</code></pre>"},{"location":"notes_de_cours/semaine2_git/#creation-dun-projet-git-local","title":"Cr\u00e9ation d'un projet git local","text":"Console<pre><code>git init\n</code></pre>"},{"location":"notes_de_cours/semaine2_git/#creation-dune-branche","title":"Cr\u00e9ation d'une branche","text":"Console<pre><code>git branch [le nom de la branche]  \n</code></pre>"},{"location":"notes_de_cours/semaine2_git/#changement-de-branche","title":"Changement de branche","text":"Console<pre><code>git checkout [le nom de la branche]  \n</code></pre>"},{"location":"notes_de_cours/semaine2_git/#afficher-toutes-les-branches","title":"Afficher toutes les branches","text":"Console<pre><code>git branch  \n</code></pre>"},{"location":"notes_de_cours/semaine2_git/#creer-et-changer-de-branche","title":"Cr\u00e9er et changer de branche","text":"Console<pre><code>git checkout -b [le nom de la branche]  \n</code></pre>"},{"location":"notes_de_cours/semaine2_git/#faire-une-soumission-de-code","title":"Faire une soumission de code","text":"Console<pre><code>git add [le fichiers ou le dossier]  \ngit commit -m \"Le message significatif\"  \n</code></pre>"},{"location":"notes_de_cours/semaine2_git/#revenir-en-arriere-quand-les-fichiers-sont-en-attente-de-la-soumission-staged","title":"Revenir en arri\u00e8re quand les fichiers sont en attente de la soumission (staged)","text":"Console<pre><code>git restore --staged [le fichier ou le dossiers]  \n</code></pre>"},{"location":"notes_de_cours/semaine2_git/#restauration-des-fichiers","title":"Restauration des fichiers","text":"<ul> <li>Vous avez modifier de quoi mais vous voulez revenir au dernier commit et perdre vos modifications) Console<pre><code>git reset --hard  \n</code></pre></li> </ul>"},{"location":"notes_de_cours/semaine2_git/#lister-les-soumissions","title":"Lister les soumissions","text":"Console<pre><code>git log  \ngit log --graph  \ngit log --oneline  \n</code></pre>"},{"location":"notes_de_cours/semaine2_git/#fusionner-2-branches","title":"fusionner 2 branches","text":"<ul> <li>Se placer dans la branche qui va recevoir (exemple main avec git checkout main)  </li> <li>faire git merge [nom de la branche \u00e0 aller chercher]  </li> <li>Prier que rien n'explose.  </li> </ul>"}]}